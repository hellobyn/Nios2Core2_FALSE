
CPU0.elf:     file format elf32-littlenios2
CPU0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000240

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00005028 memsz 0x00005158 flags rwx
    LOAD off    0x00007000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003694  02000240  02000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  020038d4  020038d4  000048d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001738  02003910  02003910  00004910  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  02005048  02005048  00006048  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  02005178  02005178  00007000  2**0
                  CONTENTS
  7 .epcs         00000000  04001020  04001020  00007000  2**0
                  CONTENTS
  8 .comment      00000039  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005d0  00000000  00000000  00007040  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000089b8  00000000  00000000  00007610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e70  00000000  00000000  0000ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002f87  00000000  00000000  00012e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000e60  00000000  00000000  00015dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f7e  00000000  00000000  00016c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000840  00000000  00000000  00018b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000193e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000098  00000000  00000000  000193f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001b2f4  2**0
                  CONTENTS, READONLY
 19 .cpu          00000004  00000000  00000000  0001b2f7  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001b2fb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001b2fc  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001b2fd  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001b301  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001b305  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0001b309  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0001b312  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0001b31b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0001b324  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  0001b32c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00041f32  00000000  00000000  0001b35a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000240 l    d  .text	00000000 .text
020038d4 l    d  .rodata	00000000 .rodata
02003910 l    d  .rwdata	00000000 .rwdata
02005048 l    d  .bss	00000000 .bss
02005178 l    d  .sdram	00000000 .sdram
04001020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPU0_bsp//obj/HAL/src/crt0.o
02000274 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
020002a0 l     F .text	00000088 timerInit
02000328 l     F .text	00000048 timer0ISR
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
020006b0 l     F .text	00000038 alt_dev_reg
02003920 l     O .rwdata	000000c8 epcs
020039e8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02000788 l     F .text	00000038 alt_flash_device_register
02000814 l     F .text	000003f8 alt_epcs_flash_query
02000c0c l     F .text	000000e8 alt_epcs_flash_memcmp
02000fe0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020014a8 l     F .text	000001fc altera_avalon_jtag_uart_irq
020016a4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02001cbc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
02001e14 l     F .text	00000038 epcs_test_wip
02001e4c l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
02002524 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200263c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02002668 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02002968 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02002aa0 l     F .text	00000050 alt_get_errno
02002af0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02004bf0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02005068 g     O .bss	00000004 alt_instruction_exception_handler
02000f54 g     F .text	0000008c alt_epcs_flash_get_info
02000638 g     F .text	00000078 alt_main
02005078 g     O .bss	00000100 alt_irq
0200504c g     O .bss	00000004 j
02002f0c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
02001e84 g     F .text	000000f8 epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02005074 g     O .bss	00000004 errno
02005060 g     O .bss	00000004 alt_argv
0200d014 g       *ABS*	00000000 _gp
02004a70 g     O .rwdata	00000180 alt_fd_list
020020c0 g     F .text	00000068 epcs_write_status_register
02003128 g     F .text	00000090 alt_find_dev
02003448 g     F .text	0000010c memcpy
02002a28 g     F .text	00000078 alt_io_redirect
020038d4 g       *ABS*	00000000 __DTOR_END__
020028c8 g     F .text	000000a0 alt_exception_cause_generated_bad_addr
020010e8 g     F .text	00000104 alt_epcs_flash_write_block
0200189c g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02005050 g     O .bss	00000004 flag
02005028 g     O .rwdata	00000004 alt_max_fd
02001074 g     F .text	00000074 alt_epcs_flash_erase_block
02005040 g     O .rwdata	00000004 _global_impure_ptr
02002388 g     F .text	0000005c epcs_exit_4_bytes_mode
02005178 g       *ABS*	00000000 __bss_end
02000548 g     F .text	000000f0 alt_iic_isr_register
02002e08 g     F .text	00000104 alt_tick
020004fc g     F .text	0000004c alt_ic_irq_enabled
02002d70 g     F .text	00000098 alt_alarm_stop
02005058 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d0 alt_irq_handler
02004a48 g     O .rwdata	00000028 alt_dev_null
02005020 g     O .rwdata	00000008 alt_dev_list
02002244 g     F .text	00000068 epcs_read_electronic_signature
02005178 g       *ABS*	00000000 end
020013e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
02005048 g     O .bss	00000004 i
020001cc g     F .exceptions	00000074 alt_instruction_exception_entry
020038d4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02001d30 g     F .text	00000088 alt_avalon_timer_sc_init
02001aa4 g     F .text	00000218 altera_avalon_jtag_uart_write
02003910 g     O .rwdata	00000010 timerPrd
020036fc g     F .text	000001a4 __call_exitprocs
02000240 g     F .text	00000038 _start
0200506c g     O .bss	00000004 _alt_tick_rate
02002f2c g     F .text	000001fc alt_avalon_spi_command
02005070 g     O .bss	00000004 _alt_nticks
0200071c g     F .text	0000006c alt_sys_init
020035e0 g     F .text	0000011c __register_exitproc
02001748 g     F .text	00000068 altera_avalon_jtag_uart_close
02001db8 g     F .text	0000005c epcs_read_status_register
02001284 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020032cc g     F .text	000000b4 alt_get_fd
020022ac g     F .text	00000080 epcs_read_device_id
020033cc g     F .text	0000007c memcmp
02001344 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02005178 g       *ABS*	00000000 __alt_stack_base
02001394 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
020031b8 g     F .text	00000114 alt_find_file
020026b8 g     F .text	000000a0 alt_dev_llist_insert
02005030 g     O .rwdata	00000008 alt_flash_dev_list
02005048 g       *ABS*	00000000 __bss_start
02000278 g     F .text	00000028 main
02005064 g     O .bss	00000004 alt_envp
020012e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200502c g     O .rwdata	00000004 alt_errno
020038d4 g       *ABS*	00000000 __CTOR_END__
02000cf4 g     F .text	00000260 alt_epcs_flash_write
020038d4 g       *ABS*	00000000 __DTOR_LIST__
020006e8 g     F .text	00000034 alt_irq_init
02002d10 g     F .text	00000060 alt_release_fd
02003380 g     F .text	00000014 atexit
02005044 g     O .rwdata	00000004 _impure_ptr
0200505c g     O .bss	00000004 alt_argc
020027b4 g     F .text	0000005c _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02005018 g     O .rwdata	00000008 alt_fs_list
02001f7c g     F .text	000000f4 epcs_read_buffer
020007c0 g     F .text	00000054 alt_epcs_flash_init
02000370 g     F .text	00000050 alt_ic_isr_register
02005048 g       *ABS*	00000000 _edata
02005178 g       *ABS*	00000000 _end
02002810 g     F .text	00000068 alt_flash_open_dev
020017b0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0200045c g     F .text	000000a0 alt_ic_irq_disable
0200232c g     F .text	0000005c epcs_enter_4_bytes_mode
02003394 g     F .text	00000038 exit
02002878 g     F .text	00000050 alt_flash_close_dev
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
020038a0 g     F .text	00000034 _exit
020023e4 g     F .text	00000140 alt_alarm_start
02003554 g     F .text	0000008c strlen
02002070 g     F .text	00000050 epcs_write_enable
02002bbc g     F .text	00000154 open
02005014 g     O .rwdata	00000004 alt_priority_mask
02005054 g     O .bss	00000004 timer0ISRContext
020003c0 g     F .text	0000009c alt_ic_irq_enable
04001000 g       *ABS*	00000000 __alt_mem_epcs
020011ec g     F .text	00000098 alt_epcs_flash_read
02005038 g     O .rwdata	00000008 alt_alarm_list
02002758 g     F .text	0000005c _do_ctors
02002574 g     F .text	000000c8 close
00000000  w      *UND*	00000000 free
02002128 g     F .text	0000011c epcs_write_buffer



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001cc0 	call	20001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001726 	beq	r2,zero,2000198 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00c08034 	movhi	r3,512
 2000140:	18d41e04 	addi	r3,r3,20600
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	100490fa 	slli	r2,r2,3
 200014c:	1885883a 	add	r2,r3,r2
 2000150:	10800017 	ldw	r2,0(r2)
 2000154:	01008034 	movhi	r4,512
 2000158:	21141e04 	addi	r4,r4,20600
 200015c:	e0fffd17 	ldw	r3,-12(fp)
 2000160:	180690fa 	slli	r3,r3,3
 2000164:	20c7883a 	add	r3,r4,r3
 2000168:	18c00104 	addi	r3,r3,4
 200016c:	18c00017 	ldw	r3,0(r3)
 2000170:	1809883a 	mov	r4,r3
 2000174:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000188:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200018c:	e0bffb17 	ldw	r2,-20(fp)
 2000190:	103fe31e 	bne	r2,zero,2000120 <__reset+0xfdfff120>
 2000194:	00000706 	br	20001b4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000198:	e0bffc17 	ldw	r2,-16(fp)
 200019c:	1085883a 	add	r2,r2,r2
 20001a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 20001a4:	e0bffd17 	ldw	r2,-12(fp)
 20001a8:	10800044 	addi	r2,r2,1
 20001ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001b0:	003fde06 	br	200012c <__reset+0xfdfff12c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	e037883a 	mov	sp,fp
 20001bc:	dfc00117 	ldw	ra,4(sp)
 20001c0:	df000017 	ldw	fp,0(sp)
 20001c4:	dec00204 	addi	sp,sp,8
 20001c8:	f800283a 	ret

020001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001cc:	defffb04 	addi	sp,sp,-20
 20001d0:	dfc00415 	stw	ra,16(sp)
 20001d4:	df000315 	stw	fp,12(sp)
 20001d8:	df000304 	addi	fp,sp,12
 20001dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 20001e0:	000531fa 	rdctl	r2,exception
 20001e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 20001e8:	e0bffd17 	ldw	r2,-12(fp)
 20001ec:	10801f0c 	andi	r2,r2,124
 20001f0:	1004d0ba 	srli	r2,r2,2
 20001f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 20001f8:	0005333a 	rdctl	r2,badaddr
 20001fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 2000200:	d0a01517 	ldw	r2,-32684(gp)
 2000204:	10000726 	beq	r2,zero,2000224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 2000208:	d0a01517 	ldw	r2,-32684(gp)
 200020c:	e0fffd17 	ldw	r3,-12(fp)
 2000210:	1809883a 	mov	r4,r3
 2000214:	e17fff17 	ldw	r5,-4(fp)
 2000218:	e1bffe17 	ldw	r6,-8(fp)
 200021c:	103ee83a 	callr	r2
 2000220:	00000206 	br	200022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000228:	0005883a 	mov	r2,zero
}
 200022c:	e037883a 	mov	sp,fp
 2000230:	dfc00117 	ldw	ra,4(sp)
 2000234:	df000017 	ldw	fp,0(sp)
 2000238:	dec00204 	addi	sp,sp,8
 200023c:	f800283a 	ret

Disassembly of section .text:

02000240 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000240:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000244:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000248:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 200024c:	d6b40514 	ori	gp,gp,53268
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000250:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000254:	10941214 	ori	r2,r2,20552

    movhi r3, %hi(__bss_end)
 2000258:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200025c:	18d45e14 	ori	r3,r3,20856

    beq r2, r3, 1f
 2000260:	10c00326 	beq	r2,r3,2000270 <_start+0x30>

0:
    stw zero, (r2)
 2000264:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000268:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200026c:	10fffd36 	bltu	r2,r3,2000264 <__reset+0xfdfff264>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000270:	20006380 	call	2000638 <alt_main>

02000274 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000274:	003fff06 	br	2000274 <__reset+0xfdfff274>

02000278 <main>:
unsigned int timer0ISRContext;
int i = 0, j = 0, flag;
alt_u32 timerPrd[4] = {5000000, 10000000, 25000000, 50000000};

int main(void)
{
 2000278:	defffe04 	addi	sp,sp,-8
 200027c:	dfc00115 	stw	ra,4(sp)
 2000280:	df000015 	stw	fp,0(sp)
 2000284:	d839883a 	mov	fp,sp
	timerInit();
 2000288:	20002a00 	call	20002a0 <timerInit>
	LED->DATA = 1;
 200028c:	00810034 	movhi	r2,1024
 2000290:	10880804 	addi	r2,r2,8224
 2000294:	00c00044 	movi	r3,1
 2000298:	10c00015 	stw	r3,0(r2)
	while(1);
 200029c:	003fff06 	br	200029c <__reset+0xfdfff29c>

020002a0 <timerInit>:
	return 0;
}

void timerInit(void)
{
 20002a0:	defffc04 	addi	sp,sp,-16
 20002a4:	dfc00315 	stw	ra,12(sp)
 20002a8:	df000215 	stw	fp,8(sp)
 20002ac:	df000204 	addi	fp,sp,8
	void* ISRContextPtr = (void*) &timer0ISRContext;
 20002b0:	d0a01004 	addi	r2,gp,-32704
 20002b4:	e0bfff15 	stw	r2,-4(fp)
	TIMER0->STATUS.WORD = 0;
 20002b8:	00810034 	movhi	r2,1024
 20002bc:	10880004 	addi	r2,r2,8192
 20002c0:	10000015 	stw	zero,0(r2)
	TIMER0->PERIODL = 50000000;
 20002c4:	00810034 	movhi	r2,1024
 20002c8:	10880004 	addi	r2,r2,8192
 20002cc:	00c0bef4 	movhi	r3,763
 20002d0:	18fc2004 	addi	r3,r3,-3968
 20002d4:	10c00215 	stw	r3,8(r2)
	TIMER0->PERIODH = 50000000 >> 16;
 20002d8:	00810034 	movhi	r2,1024
 20002dc:	10880004 	addi	r2,r2,8192
 20002e0:	00c0be84 	movi	r3,762
 20002e4:	10c00315 	stw	r3,12(r2)
	TIMER0->CONTROL.WORD = 7;
 20002e8:	00810034 	movhi	r2,1024
 20002ec:	10880004 	addi	r2,r2,8192
 20002f0:	00c001c4 	movi	r3,7
 20002f4:	10c00115 	stw	r3,4(r2)
	alt_ic_isr_register(TIMER0_IRQ_INTERRUPT_CONTROLLER_ID,
 20002f8:	d8000015 	stw	zero,0(sp)
 20002fc:	0009883a 	mov	r4,zero
 2000300:	01400084 	movi	r5,2
 2000304:	01808034 	movhi	r6,512
 2000308:	3180ca04 	addi	r6,r6,808
 200030c:	e1ffff17 	ldw	r7,-4(fp)
 2000310:	20003700 	call	2000370 <alt_ic_isr_register>
						TIMER0_IRQ,
						timer0ISR,
						ISRContextPtr,
						0x0);
}
 2000314:	e037883a 	mov	sp,fp
 2000318:	dfc00117 	ldw	ra,4(sp)
 200031c:	df000017 	ldw	fp,0(sp)
 2000320:	dec00204 	addi	sp,sp,8
 2000324:	f800283a 	ret

02000328 <timer0ISR>:

static void timer0ISR(void *timer0ISRContext)
{
 2000328:	defffe04 	addi	sp,sp,-8
 200032c:	df000115 	stw	fp,4(sp)
 2000330:	df000104 	addi	fp,sp,4
 2000334:	e13fff15 	stw	r4,-4(fp)
	TIMER0->STATUS.WORD = 0;
 2000338:	00810034 	movhi	r2,1024
 200033c:	10880004 	addi	r2,r2,8192
 2000340:	10000015 	stw	zero,0(r2)
	LED->DATA = ~LED->DATA;
 2000344:	00810034 	movhi	r2,1024
 2000348:	10880804 	addi	r2,r2,8224
 200034c:	00c10034 	movhi	r3,1024
 2000350:	18c80804 	addi	r3,r3,8224
 2000354:	18c00017 	ldw	r3,0(r3)
 2000358:	00c6303a 	nor	r3,zero,r3
 200035c:	10c00015 	stw	r3,0(r2)
}
 2000360:	e037883a 	mov	sp,fp
 2000364:	df000017 	ldw	fp,0(sp)
 2000368:	dec00104 	addi	sp,sp,4
 200036c:	f800283a 	ret

02000370 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2000370:	defff904 	addi	sp,sp,-28
 2000374:	dfc00615 	stw	ra,24(sp)
 2000378:	df000515 	stw	fp,20(sp)
 200037c:	df000504 	addi	fp,sp,20
 2000380:	e13ffc15 	stw	r4,-16(fp)
 2000384:	e17ffd15 	stw	r5,-12(fp)
 2000388:	e1bffe15 	stw	r6,-8(fp)
 200038c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2000390:	e0800217 	ldw	r2,8(fp)
 2000394:	d8800015 	stw	r2,0(sp)
 2000398:	e13ffc17 	ldw	r4,-16(fp)
 200039c:	e17ffd17 	ldw	r5,-12(fp)
 20003a0:	e1bffe17 	ldw	r6,-8(fp)
 20003a4:	e1ffff17 	ldw	r7,-4(fp)
 20003a8:	20005480 	call	2000548 <alt_iic_isr_register>
}  
 20003ac:	e037883a 	mov	sp,fp
 20003b0:	dfc00117 	ldw	ra,4(sp)
 20003b4:	df000017 	ldw	fp,0(sp)
 20003b8:	dec00204 	addi	sp,sp,8
 20003bc:	f800283a 	ret

020003c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20003c0:	defff904 	addi	sp,sp,-28
 20003c4:	df000615 	stw	fp,24(sp)
 20003c8:	df000604 	addi	fp,sp,24
 20003cc:	e13ffe15 	stw	r4,-8(fp)
 20003d0:	e17fff15 	stw	r5,-4(fp)
 20003d4:	e0bfff17 	ldw	r2,-4(fp)
 20003d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20003dc:	0005303a 	rdctl	r2,status
 20003e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20003e4:	e0fffb17 	ldw	r3,-20(fp)
 20003e8:	00bfff84 	movi	r2,-2
 20003ec:	1884703a 	and	r2,r3,r2
 20003f0:	1001703a 	wrctl	status,r2
  
  return context;
 20003f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20003f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 20003fc:	e0bffa17 	ldw	r2,-24(fp)
 2000400:	00c00044 	movi	r3,1
 2000404:	1884983a 	sll	r2,r3,r2
 2000408:	1007883a 	mov	r3,r2
 200040c:	00808034 	movhi	r2,512
 2000410:	10941604 	addi	r2,r2,20568
 2000414:	10800017 	ldw	r2,0(r2)
 2000418:	1886b03a 	or	r3,r3,r2
 200041c:	00808034 	movhi	r2,512
 2000420:	10941604 	addi	r2,r2,20568
 2000424:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2000428:	00808034 	movhi	r2,512
 200042c:	10941604 	addi	r2,r2,20568
 2000430:	10800017 	ldw	r2,0(r2)
 2000434:	100170fa 	wrctl	ienable,r2
 2000438:	e0bffc17 	ldw	r2,-16(fp)
 200043c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000440:	e0bffd17 	ldw	r2,-12(fp)
 2000444:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2000448:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 200044c:	e037883a 	mov	sp,fp
 2000450:	df000017 	ldw	fp,0(sp)
 2000454:	dec00104 	addi	sp,sp,4
 2000458:	f800283a 	ret

0200045c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200045c:	defff904 	addi	sp,sp,-28
 2000460:	df000615 	stw	fp,24(sp)
 2000464:	df000604 	addi	fp,sp,24
 2000468:	e13ffe15 	stw	r4,-8(fp)
 200046c:	e17fff15 	stw	r5,-4(fp)
 2000470:	e0bfff17 	ldw	r2,-4(fp)
 2000474:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000478:	0005303a 	rdctl	r2,status
 200047c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000480:	e0fffb17 	ldw	r3,-20(fp)
 2000484:	00bfff84 	movi	r2,-2
 2000488:	1884703a 	and	r2,r3,r2
 200048c:	1001703a 	wrctl	status,r2
  
  return context;
 2000490:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2000494:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2000498:	e0bffa17 	ldw	r2,-24(fp)
 200049c:	00c00044 	movi	r3,1
 20004a0:	1884983a 	sll	r2,r3,r2
 20004a4:	0084303a 	nor	r2,zero,r2
 20004a8:	1007883a 	mov	r3,r2
 20004ac:	00808034 	movhi	r2,512
 20004b0:	10941604 	addi	r2,r2,20568
 20004b4:	10800017 	ldw	r2,0(r2)
 20004b8:	1886703a 	and	r3,r3,r2
 20004bc:	00808034 	movhi	r2,512
 20004c0:	10941604 	addi	r2,r2,20568
 20004c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20004c8:	00808034 	movhi	r2,512
 20004cc:	10941604 	addi	r2,r2,20568
 20004d0:	10800017 	ldw	r2,0(r2)
 20004d4:	100170fa 	wrctl	ienable,r2
 20004d8:	e0bffc17 	ldw	r2,-16(fp)
 20004dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20004e0:	e0bffd17 	ldw	r2,-12(fp)
 20004e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20004e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 20004ec:	e037883a 	mov	sp,fp
 20004f0:	df000017 	ldw	fp,0(sp)
 20004f4:	dec00104 	addi	sp,sp,4
 20004f8:	f800283a 	ret

020004fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20004fc:	defffc04 	addi	sp,sp,-16
 2000500:	df000315 	stw	fp,12(sp)
 2000504:	df000304 	addi	fp,sp,12
 2000508:	e13ffe15 	stw	r4,-8(fp)
 200050c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2000510:	000530fa 	rdctl	r2,ienable
 2000514:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2000518:	e0bfff17 	ldw	r2,-4(fp)
 200051c:	00c00044 	movi	r3,1
 2000520:	1884983a 	sll	r2,r3,r2
 2000524:	1007883a 	mov	r3,r2
 2000528:	e0bffd17 	ldw	r2,-12(fp)
 200052c:	1884703a 	and	r2,r3,r2
 2000530:	1004c03a 	cmpne	r2,r2,zero
 2000534:	10803fcc 	andi	r2,r2,255
}
 2000538:	e037883a 	mov	sp,fp
 200053c:	df000017 	ldw	fp,0(sp)
 2000540:	dec00104 	addi	sp,sp,4
 2000544:	f800283a 	ret

02000548 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2000548:	defff504 	addi	sp,sp,-44
 200054c:	dfc00a15 	stw	ra,40(sp)
 2000550:	df000915 	stw	fp,36(sp)
 2000554:	df000904 	addi	fp,sp,36
 2000558:	e13ffc15 	stw	r4,-16(fp)
 200055c:	e17ffd15 	stw	r5,-12(fp)
 2000560:	e1bffe15 	stw	r6,-8(fp)
 2000564:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2000568:	00bffa84 	movi	r2,-22
 200056c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2000570:	e0bffd17 	ldw	r2,-12(fp)
 2000574:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2000578:	e0bff817 	ldw	r2,-32(fp)
 200057c:	10800808 	cmpgei	r2,r2,32
 2000580:	1000271e 	bne	r2,zero,2000620 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000584:	0005303a 	rdctl	r2,status
 2000588:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200058c:	e0fffa17 	ldw	r3,-24(fp)
 2000590:	00bfff84 	movi	r2,-2
 2000594:	1884703a 	and	r2,r3,r2
 2000598:	1001703a 	wrctl	status,r2
  
  return context;
 200059c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20005a0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 20005a4:	00c08034 	movhi	r3,512
 20005a8:	18d41e04 	addi	r3,r3,20600
 20005ac:	e0bff817 	ldw	r2,-32(fp)
 20005b0:	100490fa 	slli	r2,r2,3
 20005b4:	1885883a 	add	r2,r3,r2
 20005b8:	e0fffe17 	ldw	r3,-8(fp)
 20005bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 20005c0:	00c08034 	movhi	r3,512
 20005c4:	18d41e04 	addi	r3,r3,20600
 20005c8:	e0bff817 	ldw	r2,-32(fp)
 20005cc:	100490fa 	slli	r2,r2,3
 20005d0:	1885883a 	add	r2,r3,r2
 20005d4:	10800104 	addi	r2,r2,4
 20005d8:	e0ffff17 	ldw	r3,-4(fp)
 20005dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20005e0:	e0bffe17 	ldw	r2,-8(fp)
 20005e4:	10000526 	beq	r2,zero,20005fc <alt_iic_isr_register+0xb4>
 20005e8:	e0bff817 	ldw	r2,-32(fp)
 20005ec:	e13ffc17 	ldw	r4,-16(fp)
 20005f0:	100b883a 	mov	r5,r2
 20005f4:	20003c00 	call	20003c0 <alt_ic_irq_enable>
 20005f8:	00000406 	br	200060c <alt_iic_isr_register+0xc4>
 20005fc:	e0bff817 	ldw	r2,-32(fp)
 2000600:	e13ffc17 	ldw	r4,-16(fp)
 2000604:	100b883a 	mov	r5,r2
 2000608:	200045c0 	call	200045c <alt_ic_irq_disable>
 200060c:	e0bff715 	stw	r2,-36(fp)
 2000610:	e0bff917 	ldw	r2,-28(fp)
 2000614:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000618:	e0bffb17 	ldw	r2,-20(fp)
 200061c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2000620:	e0bff717 	ldw	r2,-36(fp)
}
 2000624:	e037883a 	mov	sp,fp
 2000628:	dfc00117 	ldw	ra,4(sp)
 200062c:	df000017 	ldw	fp,0(sp)
 2000630:	dec00204 	addi	sp,sp,8
 2000634:	f800283a 	ret

02000638 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000638:	defffd04 	addi	sp,sp,-12
 200063c:	dfc00215 	stw	ra,8(sp)
 2000640:	df000115 	stw	fp,4(sp)
 2000644:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000648:	0009883a 	mov	r4,zero
 200064c:	20006e80 	call	20006e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2000650:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2000654:	200071c0 	call	200071c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2000658:	01008034 	movhi	r4,512
 200065c:	210e3504 	addi	r4,r4,14548
 2000660:	01408034 	movhi	r5,512
 2000664:	294e3504 	addi	r5,r5,14548
 2000668:	01808034 	movhi	r6,512
 200066c:	318e3504 	addi	r6,r6,14548
 2000670:	2002a280 	call	2002a28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2000674:	20027580 	call	2002758 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2000678:	01008034 	movhi	r4,512
 200067c:	2109ed04 	addi	r4,r4,10164
 2000680:	20033800 	call	2003380 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2000684:	d1201217 	ldw	r4,-32696(gp)
 2000688:	d0e01317 	ldw	r3,-32692(gp)
 200068c:	d0a01417 	ldw	r2,-32688(gp)
 2000690:	180b883a 	mov	r5,r3
 2000694:	100d883a 	mov	r6,r2
 2000698:	20002780 	call	2000278 <main>
 200069c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20006a0:	01000044 	movi	r4,1
 20006a4:	20025740 	call	2002574 <close>
  exit (result);
 20006a8:	e13fff17 	ldw	r4,-4(fp)
 20006ac:	20033940 	call	2003394 <exit>

020006b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20006b0:	defffd04 	addi	sp,sp,-12
 20006b4:	dfc00215 	stw	ra,8(sp)
 20006b8:	df000115 	stw	fp,4(sp)
 20006bc:	df000104 	addi	fp,sp,4
 20006c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20006c4:	e13fff17 	ldw	r4,-4(fp)
 20006c8:	01408034 	movhi	r5,512
 20006cc:	29540804 	addi	r5,r5,20512
 20006d0:	20026b80 	call	20026b8 <alt_dev_llist_insert>
}
 20006d4:	e037883a 	mov	sp,fp
 20006d8:	dfc00117 	ldw	ra,4(sp)
 20006dc:	df000017 	ldw	fp,0(sp)
 20006e0:	dec00204 	addi	sp,sp,8
 20006e4:	f800283a 	ret

020006e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20006e8:	defffd04 	addi	sp,sp,-12
 20006ec:	dfc00215 	stw	ra,8(sp)
 20006f0:	df000115 	stw	fp,4(sp)
 20006f4:	df000104 	addi	fp,sp,4
 20006f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU0, cpu0);
 20006fc:	2002f0c0 	call	2002f0c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2000700:	00800044 	movi	r2,1
 2000704:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2000708:	e037883a 	mov	sp,fp
 200070c:	dfc00117 	ldw	ra,4(sp)
 2000710:	df000017 	ldw	fp,0(sp)
 2000714:	dec00204 	addi	sp,sp,8
 2000718:	f800283a 	ret

0200071c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200071c:	defffe04 	addi	sp,sp,-8
 2000720:	dfc00115 	stw	ra,4(sp)
 2000724:	df000015 	stw	fp,0(sp)
 2000728:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER0, timer0);
 200072c:	01010034 	movhi	r4,1024
 2000730:	21080004 	addi	r4,r4,8192
 2000734:	000b883a 	mov	r5,zero
 2000738:	01800084 	movi	r6,2
 200073c:	01c0fa04 	movi	r7,1000
 2000740:	2001d300 	call	2001d30 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 2000744:	01008034 	movhi	r4,512
 2000748:	210e4804 	addi	r4,r4,14624
 200074c:	20007c00 	call	20007c0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2000750:	01008034 	movhi	r4,512
 2000754:	210e8404 	addi	r4,r4,14864
 2000758:	000b883a 	mov	r5,zero
 200075c:	000d883a 	mov	r6,zero
 2000760:	20013e80 	call	20013e8 <altera_avalon_jtag_uart_init>
 2000764:	01008034 	movhi	r4,512
 2000768:	210e7a04 	addi	r4,r4,14824
 200076c:	20006b00 	call	20006b0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 2000770:	0001883a 	nop
}
 2000774:	e037883a 	mov	sp,fp
 2000778:	dfc00117 	ldw	ra,4(sp)
 200077c:	df000017 	ldw	fp,0(sp)
 2000780:	dec00204 	addi	sp,sp,8
 2000784:	f800283a 	ret

02000788 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2000788:	defffd04 	addi	sp,sp,-12
 200078c:	dfc00215 	stw	ra,8(sp)
 2000790:	df000115 	stw	fp,4(sp)
 2000794:	df000104 	addi	fp,sp,4
 2000798:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 200079c:	e13fff17 	ldw	r4,-4(fp)
 20007a0:	01408034 	movhi	r5,512
 20007a4:	29540c04 	addi	r5,r5,20528
 20007a8:	20026b80 	call	20026b8 <alt_dev_llist_insert>
}
 20007ac:	e037883a 	mov	sp,fp
 20007b0:	dfc00117 	ldw	ra,4(sp)
 20007b4:	df000017 	ldw	fp,0(sp)
 20007b8:	dec00204 	addi	sp,sp,8
 20007bc:	f800283a 	ret

020007c0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 20007c0:	defffc04 	addi	sp,sp,-16
 20007c4:	dfc00315 	stw	ra,12(sp)
 20007c8:	df000215 	stw	fp,8(sp)
 20007cc:	df000204 	addi	fp,sp,8
 20007d0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20007d4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 20007d8:	e13fff17 	ldw	r4,-4(fp)
 20007dc:	20008140 	call	2000814 <alt_epcs_flash_query>
 20007e0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 20007e4:	e0bffe17 	ldw	r2,-8(fp)
 20007e8:	1000041e 	bne	r2,zero,20007fc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 20007ec:	e0bfff17 	ldw	r2,-4(fp)
 20007f0:	1009883a 	mov	r4,r2
 20007f4:	20007880 	call	2000788 <alt_flash_device_register>
 20007f8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 20007fc:	e0bffe17 	ldw	r2,-8(fp)
}
 2000800:	e037883a 	mov	sp,fp
 2000804:	dfc00117 	ldw	ra,4(sp)
 2000808:	df000017 	ldw	fp,0(sp)
 200080c:	dec00204 	addi	sp,sp,8
 2000810:	f800283a 	ret

02000814 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2000814:	defffc04 	addi	sp,sp,-16
 2000818:	dfc00315 	stw	ra,12(sp)
 200081c:	df000215 	stw	fp,8(sp)
 2000820:	df000204 	addi	fp,sp,8
 2000824:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2000828:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 200082c:	e0bfff17 	ldw	r2,-4(fp)
 2000830:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2000834:	e0bfff17 	ldw	r2,-4(fp)
 2000838:	10802d17 	ldw	r2,180(r2)
 200083c:	1009883a 	mov	r4,r2
 2000840:	20022440 	call	2002244 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2000844:	10c03fcc 	andi	r3,r2,255
 2000848:	e0bfff17 	ldw	r2,-4(fp)
 200084c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2000850:	e0bfff17 	ldw	r2,-4(fp)
 2000854:	10802f17 	ldw	r2,188(r2)
 2000858:	10800598 	cmpnei	r2,r2,22
 200085c:	10000a1e 	bne	r2,zero,2000888 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2000860:	e0bfff17 	ldw	r2,-4(fp)
 2000864:	00c02034 	movhi	r3,128
 2000868:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 200086c:	e0bfff17 	ldw	r2,-4(fp)
 2000870:	00c02004 	movi	r3,128
 2000874:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2000878:	e0bfff17 	ldw	r2,-4(fp)
 200087c:	00c00074 	movhi	r3,1
 2000880:	10c01015 	stw	r3,64(r2)
 2000884:	0000ce06 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2000888:	e0bfff17 	ldw	r2,-4(fp)
 200088c:	10802f17 	ldw	r2,188(r2)
 2000890:	10800518 	cmpnei	r2,r2,20
 2000894:	10000a1e 	bne	r2,zero,20008c0 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2000898:	e0bfff17 	ldw	r2,-4(fp)
 200089c:	00c00834 	movhi	r3,32
 20008a0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 20008a4:	e0bfff17 	ldw	r2,-4(fp)
 20008a8:	00c00804 	movi	r3,32
 20008ac:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20008b0:	e0bfff17 	ldw	r2,-4(fp)
 20008b4:	00c00074 	movhi	r3,1
 20008b8:	10c01015 	stw	r3,64(r2)
 20008bc:	0000c006 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 20008c0:	e0bfff17 	ldw	r2,-4(fp)
 20008c4:	10802f17 	ldw	r2,188(r2)
 20008c8:	108004d8 	cmpnei	r2,r2,19
 20008cc:	10000a1e 	bne	r2,zero,20008f8 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20008d0:	e0bfff17 	ldw	r2,-4(fp)
 20008d4:	00c00434 	movhi	r3,16
 20008d8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 20008dc:	e0bfff17 	ldw	r2,-4(fp)
 20008e0:	00c00404 	movi	r3,16
 20008e4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20008e8:	e0bfff17 	ldw	r2,-4(fp)
 20008ec:	00c00074 	movhi	r3,1
 20008f0:	10c01015 	stw	r3,64(r2)
 20008f4:	0000b206 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20008f8:	e0bfff17 	ldw	r2,-4(fp)
 20008fc:	10802f17 	ldw	r2,188(r2)
 2000900:	10800498 	cmpnei	r2,r2,18
 2000904:	10000a1e 	bne	r2,zero,2000930 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2000908:	e0bfff17 	ldw	r2,-4(fp)
 200090c:	00c00234 	movhi	r3,8
 2000910:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 2000914:	e0bfff17 	ldw	r2,-4(fp)
 2000918:	00c00204 	movi	r3,8
 200091c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2000920:	e0bfff17 	ldw	r2,-4(fp)
 2000924:	00c00074 	movhi	r3,1
 2000928:	10c01015 	stw	r3,64(r2)
 200092c:	0000a406 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2000930:	e0bfff17 	ldw	r2,-4(fp)
 2000934:	10802f17 	ldw	r2,188(r2)
 2000938:	10800418 	cmpnei	r2,r2,16
 200093c:	10000a1e 	bne	r2,zero,2000968 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2000940:	e0bfff17 	ldw	r2,-4(fp)
 2000944:	00c000b4 	movhi	r3,2
 2000948:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 200094c:	e0bfff17 	ldw	r2,-4(fp)
 2000950:	00c00104 	movi	r3,4
 2000954:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2000958:	e0bfff17 	ldw	r2,-4(fp)
 200095c:	00e00014 	movui	r3,32768
 2000960:	10c01015 	stw	r3,64(r2)
 2000964:	00009606 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2000968:	e0bfff17 	ldw	r2,-4(fp)
 200096c:	10802d17 	ldw	r2,180(r2)
 2000970:	1009883a 	mov	r4,r2
 2000974:	20022ac0 	call	20022ac <epcs_read_device_id>
 2000978:	1007883a 	mov	r3,r2
 200097c:	e0bfff17 	ldw	r2,-4(fp)
 2000980:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 2000984:	e0bfff17 	ldw	r2,-4(fp)
 2000988:	10c02f17 	ldw	r3,188(r2)
 200098c:	00804034 	movhi	r2,256
 2000990:	10bfffc4 	addi	r2,r2,-1
 2000994:	1886703a 	and	r3,r3,r2
 2000998:	00800874 	movhi	r2,33
 200099c:	10ae8544 	addi	r2,r2,-17899
 20009a0:	18800a1e 	bne	r3,r2,20009cc <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 20009a4:	e0bfff17 	ldw	r2,-4(fp)
 20009a8:	00c00834 	movhi	r3,32
 20009ac:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 20009b0:	e0bfff17 	ldw	r2,-4(fp)
 20009b4:	00c00804 	movi	r3,32
 20009b8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 20009bc:	e0bfff17 	ldw	r2,-4(fp)
 20009c0:	00c00074 	movhi	r3,1
 20009c4:	10c01015 	stw	r3,64(r2)
 20009c8:	00007d06 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 20009cc:	e0bfff17 	ldw	r2,-4(fp)
 20009d0:	10c02f17 	ldw	r3,188(r2)
 20009d4:	00804034 	movhi	r2,256
 20009d8:	10bfffc4 	addi	r2,r2,-1
 20009dc:	1886703a 	and	r3,r3,r2
 20009e0:	00800874 	movhi	r2,33
 20009e4:	10ae8584 	addi	r2,r2,-17898
 20009e8:	18800a1e 	bne	r3,r2,2000a14 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 20009ec:	e0bfff17 	ldw	r2,-4(fp)
 20009f0:	00c01034 	movhi	r3,64
 20009f4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 20009f8:	e0bfff17 	ldw	r2,-4(fp)
 20009fc:	00c01004 	movi	r3,64
 2000a00:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000a04:	e0bfff17 	ldw	r2,-4(fp)
 2000a08:	00c00074 	movhi	r3,1
 2000a0c:	10c01015 	stw	r3,64(r2)
 2000a10:	00006b06 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 2000a14:	e0bfff17 	ldw	r2,-4(fp)
 2000a18:	10c02f17 	ldw	r3,188(r2)
 2000a1c:	00804034 	movhi	r2,256
 2000a20:	10bfffc4 	addi	r2,r2,-1
 2000a24:	1886703a 	and	r3,r3,r2
 2000a28:	00800874 	movhi	r2,33
 2000a2c:	10ae85c4 	addi	r2,r2,-17897
 2000a30:	18800a1e 	bne	r3,r2,2000a5c <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2000a34:	e0bfff17 	ldw	r2,-4(fp)
 2000a38:	00c02034 	movhi	r3,128
 2000a3c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2000a40:	e0bfff17 	ldw	r2,-4(fp)
 2000a44:	00c02004 	movi	r3,128
 2000a48:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000a4c:	e0bfff17 	ldw	r2,-4(fp)
 2000a50:	00c00074 	movhi	r3,1
 2000a54:	10c01015 	stw	r3,64(r2)
 2000a58:	00005906 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2000a5c:	e0bfff17 	ldw	r2,-4(fp)
 2000a60:	10c02f17 	ldw	r3,188(r2)
 2000a64:	00804034 	movhi	r2,256
 2000a68:	10bfffc4 	addi	r2,r2,-1
 2000a6c:	1886703a 	and	r3,r3,r2
 2000a70:	00800874 	movhi	r2,33
 2000a74:	10ae8604 	addi	r2,r2,-17896
 2000a78:	18800a1e 	bne	r3,r2,2000aa4 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2000a7c:	e0bfff17 	ldw	r2,-4(fp)
 2000a80:	00c04034 	movhi	r3,256
 2000a84:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2000a88:	e0bfff17 	ldw	r2,-4(fp)
 2000a8c:	00c04004 	movi	r3,256
 2000a90:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000a94:	e0bfff17 	ldw	r2,-4(fp)
 2000a98:	00c00074 	movhi	r3,1
 2000a9c:	10c01015 	stw	r3,64(r2)
 2000aa0:	00004706 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2000aa4:	e0bfff17 	ldw	r2,-4(fp)
 2000aa8:	10802f17 	ldw	r2,188(r2)
 2000aac:	10803fcc 	andi	r2,r2,255
 2000ab0:	10800618 	cmpnei	r2,r2,24
 2000ab4:	10000a1e 	bne	r2,zero,2000ae0 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2000ab8:	e0bfff17 	ldw	r2,-4(fp)
 2000abc:	00c04034 	movhi	r3,256
 2000ac0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2000ac4:	e0bfff17 	ldw	r2,-4(fp)
 2000ac8:	00c01004 	movi	r3,64
 2000acc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 2000ad0:	e0bfff17 	ldw	r2,-4(fp)
 2000ad4:	00c00134 	movhi	r3,4
 2000ad8:	10c01015 	stw	r3,64(r2)
 2000adc:	00003806 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2000ae0:	e0bfff17 	ldw	r2,-4(fp)
 2000ae4:	10802f17 	ldw	r2,188(r2)
 2000ae8:	10803fcc 	andi	r2,r2,255
 2000aec:	10800658 	cmpnei	r2,r2,25
 2000af0:	10000d1e 	bne	r2,zero,2000b28 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2000af4:	e0bfff17 	ldw	r2,-4(fp)
 2000af8:	00c08034 	movhi	r3,512
 2000afc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2000b00:	e0bfff17 	ldw	r2,-4(fp)
 2000b04:	00c08004 	movi	r3,512
 2000b08:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000b0c:	e0bfff17 	ldw	r2,-4(fp)
 2000b10:	00c00074 	movhi	r3,1
 2000b14:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2000b18:	e0bfff17 	ldw	r2,-4(fp)
 2000b1c:	00c00044 	movi	r3,1
 2000b20:	10c03115 	stw	r3,196(r2)
 2000b24:	00002606 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 2000b28:	e0bfff17 	ldw	r2,-4(fp)
 2000b2c:	10802f17 	ldw	r2,188(r2)
 2000b30:	10803fcc 	andi	r2,r2,255
 2000b34:	10800818 	cmpnei	r2,r2,32
 2000b38:	10000d1e 	bne	r2,zero,2000b70 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 2000b3c:	e0bfff17 	ldw	r2,-4(fp)
 2000b40:	00c10034 	movhi	r3,1024
 2000b44:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 2000b48:	e0bfff17 	ldw	r2,-4(fp)
 2000b4c:	00c10004 	movi	r3,1024
 2000b50:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000b54:	e0bfff17 	ldw	r2,-4(fp)
 2000b58:	00c00074 	movhi	r3,1
 2000b5c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2000b60:	e0bfff17 	ldw	r2,-4(fp)
 2000b64:	00c00044 	movi	r3,1
 2000b68:	10c03115 	stw	r3,196(r2)
 2000b6c:	00001406 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2000b70:	e0bfff17 	ldw	r2,-4(fp)
 2000b74:	10802f17 	ldw	r2,188(r2)
 2000b78:	10803fcc 	andi	r2,r2,255
 2000b7c:	10800858 	cmpnei	r2,r2,33
 2000b80:	10000d1e 	bne	r2,zero,2000bb8 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 2000b84:	e0bfff17 	ldw	r2,-4(fp)
 2000b88:	00c20034 	movhi	r3,2048
 2000b8c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 2000b90:	e0bfff17 	ldw	r2,-4(fp)
 2000b94:	00c20004 	movi	r3,2048
 2000b98:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2000b9c:	e0bfff17 	ldw	r2,-4(fp)
 2000ba0:	00c00074 	movhi	r3,1
 2000ba4:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2000ba8:	e0bfff17 	ldw	r2,-4(fp)
 2000bac:	00c00044 	movi	r3,1
 2000bb0:	10c03115 	stw	r3,196(r2)
 2000bb4:	00000206 	br	2000bc0 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2000bb8:	00bffb44 	movi	r2,-19
 2000bbc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2000bc0:	e0bfff17 	ldw	r2,-4(fp)
 2000bc4:	10800e17 	ldw	r2,56(r2)
 2000bc8:	1007883a 	mov	r3,r2
 2000bcc:	e0bfff17 	ldw	r2,-4(fp)
 2000bd0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2000bd4:	e0bfff17 	ldw	r2,-4(fp)
 2000bd8:	00c00044 	movi	r3,1
 2000bdc:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2000be0:	e0bfff17 	ldw	r2,-4(fp)
 2000be4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2000be8:	e0bfff17 	ldw	r2,-4(fp)
 2000bec:	00c04004 	movi	r3,256
 2000bf0:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2000bf4:	e0bffe17 	ldw	r2,-8(fp)
}
 2000bf8:	e037883a 	mov	sp,fp
 2000bfc:	dfc00117 	ldw	ra,4(sp)
 2000c00:	df000017 	ldw	fp,0(sp)
 2000c04:	dec00204 	addi	sp,sp,8
 2000c08:	f800283a 	ret

02000c0c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2000c0c:	deffee04 	addi	sp,sp,-72
 2000c10:	dfc01115 	stw	ra,68(sp)
 2000c14:	df001015 	stw	fp,64(sp)
 2000c18:	df001004 	addi	fp,sp,64
 2000c1c:	e13ffc15 	stw	r4,-16(fp)
 2000c20:	e17ffd15 	stw	r5,-12(fp)
 2000c24:	e1bffe15 	stw	r6,-8(fp)
 2000c28:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2000c2c:	00800804 	movi	r2,32
 2000c30:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2000c34:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2000c38:	00002606 	br	2000cd4 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2000c3c:	e0bff117 	ldw	r2,-60(fp)
 2000c40:	e0ffff17 	ldw	r3,-4(fp)
 2000c44:	1880012e 	bgeu	r3,r2,2000c4c <alt_epcs_flash_memcmp+0x40>
 2000c48:	1805883a 	mov	r2,r3
 2000c4c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2000c50:	e0fffe17 	ldw	r3,-8(fp)
 2000c54:	e0bff017 	ldw	r2,-64(fp)
 2000c58:	1887883a 	add	r3,r3,r2
 2000c5c:	e0bff404 	addi	r2,fp,-48
 2000c60:	e13ffc17 	ldw	r4,-16(fp)
 2000c64:	180b883a 	mov	r5,r3
 2000c68:	100d883a 	mov	r6,r2
 2000c6c:	e1fff217 	ldw	r7,-56(fp)
 2000c70:	20011ec0 	call	20011ec <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2000c74:	1000020e 	bge	r2,zero,2000c80 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2000c78:	00bfffc4 	movi	r2,-1
 2000c7c:	00001806 	br	2000ce0 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2000c80:	e0bff017 	ldw	r2,-64(fp)
 2000c84:	e0fffd17 	ldw	r3,-12(fp)
 2000c88:	1889883a 	add	r4,r3,r2
 2000c8c:	e0bff217 	ldw	r2,-56(fp)
 2000c90:	e0fff404 	addi	r3,fp,-48
 2000c94:	180b883a 	mov	r5,r3
 2000c98:	100d883a 	mov	r6,r2
 2000c9c:	20033cc0 	call	20033cc <memcmp>
 2000ca0:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2000ca4:	e0bff317 	ldw	r2,-52(fp)
 2000ca8:	10000226 	beq	r2,zero,2000cb4 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 2000cac:	e0bff317 	ldw	r2,-52(fp)
 2000cb0:	00000b06 	br	2000ce0 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 2000cb4:	e0bff217 	ldw	r2,-56(fp)
 2000cb8:	e0ffff17 	ldw	r3,-4(fp)
 2000cbc:	1885c83a 	sub	r2,r3,r2
 2000cc0:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2000cc4:	e0fff017 	ldw	r3,-64(fp)
 2000cc8:	e0bff217 	ldw	r2,-56(fp)
 2000ccc:	1885883a 	add	r2,r3,r2
 2000cd0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2000cd4:	e0bfff17 	ldw	r2,-4(fp)
 2000cd8:	103fd81e 	bne	r2,zero,2000c3c <__reset+0xfdfffc3c>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2000cdc:	0005883a 	mov	r2,zero
}
 2000ce0:	e037883a 	mov	sp,fp
 2000ce4:	dfc00117 	ldw	ra,4(sp)
 2000ce8:	df000017 	ldw	fp,0(sp)
 2000cec:	dec00204 	addi	sp,sp,8
 2000cf0:	f800283a 	ret

02000cf4 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2000cf4:	defff404 	addi	sp,sp,-48
 2000cf8:	dfc00b15 	stw	ra,44(sp)
 2000cfc:	df000a15 	stw	fp,40(sp)
 2000d00:	df000a04 	addi	fp,sp,40
 2000d04:	e13ffc15 	stw	r4,-16(fp)
 2000d08:	e17ffd15 	stw	r5,-12(fp)
 2000d0c:	e1bffe15 	stw	r6,-8(fp)
 2000d10:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2000d14:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2000d18:	e03ff815 	stw	zero,-32(fp)
 2000d1c:	00008306 	br	2000f2c <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2000d20:	e0fffc17 	ldw	r3,-16(fp)
 2000d24:	e0bff817 	ldw	r2,-32(fp)
 2000d28:	1004913a 	slli	r2,r2,4
 2000d2c:	1885883a 	add	r2,r3,r2
 2000d30:	10800d04 	addi	r2,r2,52
 2000d34:	10800017 	ldw	r2,0(r2)
 2000d38:	e0fffd17 	ldw	r3,-12(fp)
 2000d3c:	18807816 	blt	r3,r2,2000f20 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2000d40:	e0fffc17 	ldw	r3,-16(fp)
 2000d44:	e0bff817 	ldw	r2,-32(fp)
 2000d48:	1004913a 	slli	r2,r2,4
 2000d4c:	1885883a 	add	r2,r3,r2
 2000d50:	10800d04 	addi	r2,r2,52
 2000d54:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2000d58:	e13ffc17 	ldw	r4,-16(fp)
 2000d5c:	e0bff817 	ldw	r2,-32(fp)
 2000d60:	1004913a 	slli	r2,r2,4
 2000d64:	2085883a 	add	r2,r4,r2
 2000d68:	10800e04 	addi	r2,r2,56
 2000d6c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2000d70:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2000d74:	e0fffd17 	ldw	r3,-12(fp)
 2000d78:	1880690e 	bge	r3,r2,2000f20 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2000d7c:	e0fffc17 	ldw	r3,-16(fp)
 2000d80:	e0bff817 	ldw	r2,-32(fp)
 2000d84:	1004913a 	slli	r2,r2,4
 2000d88:	1885883a 	add	r2,r3,r2
 2000d8c:	10800d04 	addi	r2,r2,52
 2000d90:	10800017 	ldw	r2,0(r2)
 2000d94:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2000d98:	e03ff915 	stw	zero,-28(fp)
 2000d9c:	00005806 	br	2000f00 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2000da0:	e0fffd17 	ldw	r3,-12(fp)
 2000da4:	e0bffa17 	ldw	r2,-24(fp)
 2000da8:	18804916 	blt	r3,r2,2000ed0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2000dac:	e0fffc17 	ldw	r3,-16(fp)
 2000db0:	e0bff817 	ldw	r2,-32(fp)
 2000db4:	10800104 	addi	r2,r2,4
 2000db8:	1004913a 	slli	r2,r2,4
 2000dbc:	1885883a 	add	r2,r3,r2
 2000dc0:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2000dc4:	e0bffa17 	ldw	r2,-24(fp)
 2000dc8:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2000dcc:	e0fffd17 	ldw	r3,-12(fp)
 2000dd0:	18803f0e 	bge	r3,r2,2000ed0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2000dd4:	e0fffc17 	ldw	r3,-16(fp)
 2000dd8:	e0bff817 	ldw	r2,-32(fp)
 2000ddc:	10800104 	addi	r2,r2,4
 2000de0:	1004913a 	slli	r2,r2,4
 2000de4:	1885883a 	add	r2,r3,r2
 2000de8:	10c00017 	ldw	r3,0(r2)
 2000dec:	e0bffa17 	ldw	r2,-24(fp)
 2000df0:	1887883a 	add	r3,r3,r2
 2000df4:	e0bffd17 	ldw	r2,-12(fp)
 2000df8:	1885c83a 	sub	r2,r3,r2
 2000dfc:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2000e00:	e0fffb17 	ldw	r3,-20(fp)
 2000e04:	e0bfff17 	ldw	r2,-4(fp)
 2000e08:	1880010e 	bge	r3,r2,2000e10 <alt_epcs_flash_write+0x11c>
 2000e0c:	1805883a 	mov	r2,r3
 2000e10:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2000e14:	e0bffb17 	ldw	r2,-20(fp)
 2000e18:	e13ffc17 	ldw	r4,-16(fp)
 2000e1c:	e17ffe17 	ldw	r5,-8(fp)
 2000e20:	e1bffd17 	ldw	r6,-12(fp)
 2000e24:	100f883a 	mov	r7,r2
 2000e28:	2000c0c0 	call	2000c0c <alt_epcs_flash_memcmp>
 2000e2c:	10001226 	beq	r2,zero,2000e78 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2000e30:	e0bffc17 	ldw	r2,-16(fp)
 2000e34:	10800817 	ldw	r2,32(r2)
 2000e38:	e13ffc17 	ldw	r4,-16(fp)
 2000e3c:	e17ffa17 	ldw	r5,-24(fp)
 2000e40:	103ee83a 	callr	r2
 2000e44:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2000e48:	e0bff717 	ldw	r2,-36(fp)
 2000e4c:	10000a1e 	bne	r2,zero,2000e78 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2000e50:	e0bffc17 	ldw	r2,-16(fp)
 2000e54:	10800917 	ldw	r2,36(r2)
 2000e58:	e0fffb17 	ldw	r3,-20(fp)
 2000e5c:	d8c00015 	stw	r3,0(sp)
 2000e60:	e13ffc17 	ldw	r4,-16(fp)
 2000e64:	e17ffa17 	ldw	r5,-24(fp)
 2000e68:	e1bffd17 	ldw	r6,-12(fp)
 2000e6c:	e1fffe17 	ldw	r7,-8(fp)
 2000e70:	103ee83a 	callr	r2
 2000e74:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2000e78:	e0ffff17 	ldw	r3,-4(fp)
 2000e7c:	e0bffb17 	ldw	r2,-20(fp)
 2000e80:	18802e26 	beq	r3,r2,2000f3c <alt_epcs_flash_write+0x248>
 2000e84:	e0bff717 	ldw	r2,-36(fp)
 2000e88:	10002c1e 	bne	r2,zero,2000f3c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2000e8c:	e0ffff17 	ldw	r3,-4(fp)
 2000e90:	e0bffb17 	ldw	r2,-20(fp)
 2000e94:	1885c83a 	sub	r2,r3,r2
 2000e98:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2000e9c:	e0fffc17 	ldw	r3,-16(fp)
 2000ea0:	e0bff817 	ldw	r2,-32(fp)
 2000ea4:	10800104 	addi	r2,r2,4
 2000ea8:	1004913a 	slli	r2,r2,4
 2000eac:	1885883a 	add	r2,r3,r2
 2000eb0:	10c00017 	ldw	r3,0(r2)
 2000eb4:	e0bffa17 	ldw	r2,-24(fp)
 2000eb8:	1885883a 	add	r2,r3,r2
 2000ebc:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2000ec0:	e0bffb17 	ldw	r2,-20(fp)
 2000ec4:	e0fffe17 	ldw	r3,-8(fp)
 2000ec8:	1885883a 	add	r2,r3,r2
 2000ecc:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2000ed0:	e0fffc17 	ldw	r3,-16(fp)
 2000ed4:	e0bff817 	ldw	r2,-32(fp)
 2000ed8:	10800104 	addi	r2,r2,4
 2000edc:	1004913a 	slli	r2,r2,4
 2000ee0:	1885883a 	add	r2,r3,r2
 2000ee4:	10800017 	ldw	r2,0(r2)
 2000ee8:	e0fffa17 	ldw	r3,-24(fp)
 2000eec:	1885883a 	add	r2,r3,r2
 2000ef0:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2000ef4:	e0bff917 	ldw	r2,-28(fp)
 2000ef8:	10800044 	addi	r2,r2,1
 2000efc:	e0bff915 	stw	r2,-28(fp)
 2000f00:	e0fffc17 	ldw	r3,-16(fp)
 2000f04:	e0bff817 	ldw	r2,-32(fp)
 2000f08:	1004913a 	slli	r2,r2,4
 2000f0c:	1885883a 	add	r2,r3,r2
 2000f10:	10800f04 	addi	r2,r2,60
 2000f14:	10800017 	ldw	r2,0(r2)
 2000f18:	e0fff917 	ldw	r3,-28(fp)
 2000f1c:	18bfa016 	blt	r3,r2,2000da0 <__reset+0xfdfffda0>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2000f20:	e0bff817 	ldw	r2,-32(fp)
 2000f24:	10800044 	addi	r2,r2,1
 2000f28:	e0bff815 	stw	r2,-32(fp)
 2000f2c:	e0bffc17 	ldw	r2,-16(fp)
 2000f30:	10800c17 	ldw	r2,48(r2)
 2000f34:	e0fff817 	ldw	r3,-32(fp)
 2000f38:	18bf7916 	blt	r3,r2,2000d20 <__reset+0xfdfffd20>
      }
    }
  }

finished:
  return ret_code;
 2000f3c:	e0bff717 	ldw	r2,-36(fp)
}
 2000f40:	e037883a 	mov	sp,fp
 2000f44:	dfc00117 	ldw	ra,4(sp)
 2000f48:	df000017 	ldw	fp,0(sp)
 2000f4c:	dec00204 	addi	sp,sp,8
 2000f50:	f800283a 	ret

02000f54 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2000f54:	defffa04 	addi	sp,sp,-24
 2000f58:	df000515 	stw	fp,20(sp)
 2000f5c:	df000504 	addi	fp,sp,20
 2000f60:	e13ffd15 	stw	r4,-12(fp)
 2000f64:	e17ffe15 	stw	r5,-8(fp)
 2000f68:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2000f6c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2000f70:	e0bffd17 	ldw	r2,-12(fp)
 2000f74:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 2000f78:	e0bffc17 	ldw	r2,-16(fp)
 2000f7c:	10c00c17 	ldw	r3,48(r2)
 2000f80:	e0bfff17 	ldw	r2,-4(fp)
 2000f84:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2000f88:	e0bffc17 	ldw	r2,-16(fp)
 2000f8c:	10800c17 	ldw	r2,48(r2)
 2000f90:	1000031e 	bne	r2,zero,2000fa0 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2000f94:	00bffec4 	movi	r2,-5
 2000f98:	e0bffb15 	stw	r2,-20(fp)
 2000f9c:	00000b06 	br	2000fcc <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2000fa0:	e0bffc17 	ldw	r2,-16(fp)
 2000fa4:	10800c17 	ldw	r2,48(r2)
 2000fa8:	10800250 	cmplti	r2,r2,9
 2000fac:	1000031e 	bne	r2,zero,2000fbc <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2000fb0:	00bffd04 	movi	r2,-12
 2000fb4:	e0bffb15 	stw	r2,-20(fp)
 2000fb8:	00000406 	br	2000fcc <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2000fbc:	e0bffc17 	ldw	r2,-16(fp)
 2000fc0:	10c00d04 	addi	r3,r2,52
 2000fc4:	e0bffe17 	ldw	r2,-8(fp)
 2000fc8:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2000fcc:	e0bffb17 	ldw	r2,-20(fp)
}
 2000fd0:	e037883a 	mov	sp,fp
 2000fd4:	df000017 	ldw	fp,0(sp)
 2000fd8:	dec00104 	addi	sp,sp,4
 2000fdc:	f800283a 	ret

02000fe0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2000fe0:	defff904 	addi	sp,sp,-28
 2000fe4:	df000615 	stw	fp,24(sp)
 2000fe8:	df000604 	addi	fp,sp,24
 2000fec:	e13ffe15 	stw	r4,-8(fp)
 2000ff0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2000ff4:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2000ff8:	e0bffe17 	ldw	r2,-8(fp)
 2000ffc:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2001000:	e0bffb17 	ldw	r2,-20(fp)
 2001004:	10800c17 	ldw	r2,48(r2)
 2001008:	10bfffc4 	addi	r2,r2,-1
 200100c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2001010:	e0fffb17 	ldw	r3,-20(fp)
 2001014:	e0bffc17 	ldw	r2,-16(fp)
 2001018:	1004913a 	slli	r2,r2,4
 200101c:	1885883a 	add	r2,r3,r2
 2001020:	10800d04 	addi	r2,r2,52
 2001024:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 2001028:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200102c:	e13ffb17 	ldw	r4,-20(fp)
 2001030:	e0bffc17 	ldw	r2,-16(fp)
 2001034:	1004913a 	slli	r2,r2,4
 2001038:	2085883a 	add	r2,r4,r2
 200103c:	10800e04 	addi	r2,r2,56
 2001040:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2001044:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 2001048:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 200104c:	e0bfff17 	ldw	r2,-4(fp)
 2001050:	e0fffd17 	ldw	r3,-12(fp)
 2001054:	1880022e 	bgeu	r3,r2,2001060 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2001058:	00bffec4 	movi	r2,-5
 200105c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2001060:	e0bffa17 	ldw	r2,-24(fp)
}
 2001064:	e037883a 	mov	sp,fp
 2001068:	df000017 	ldw	fp,0(sp)
 200106c:	dec00104 	addi	sp,sp,4
 2001070:	f800283a 	ret

02001074 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2001074:	defffa04 	addi	sp,sp,-24
 2001078:	dfc00515 	stw	ra,20(sp)
 200107c:	df000415 	stw	fp,16(sp)
 2001080:	df000404 	addi	fp,sp,16
 2001084:	e13ffe15 	stw	r4,-8(fp)
 2001088:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200108c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2001090:	e0bffe17 	ldw	r2,-8(fp)
 2001094:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2001098:	e13ffe17 	ldw	r4,-8(fp)
 200109c:	e17fff17 	ldw	r5,-4(fp)
 20010a0:	2000fe00 	call	2000fe0 <alt_epcs_test_address>
 20010a4:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 20010a8:	e0bffc17 	ldw	r2,-16(fp)
 20010ac:	10000816 	blt	r2,zero,20010d0 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 20010b0:	e0bffd17 	ldw	r2,-12(fp)
 20010b4:	11002d17 	ldw	r4,180(r2)
 20010b8:	e0ffff17 	ldw	r3,-4(fp)
 20010bc:	e0bffd17 	ldw	r2,-12(fp)
 20010c0:	10803117 	ldw	r2,196(r2)
 20010c4:	180b883a 	mov	r5,r3
 20010c8:	100d883a 	mov	r6,r2
 20010cc:	2001e840 	call	2001e84 <epcs_sector_erase>
  }
  return ret_code;
 20010d0:	e0bffc17 	ldw	r2,-16(fp)
}
 20010d4:	e037883a 	mov	sp,fp
 20010d8:	dfc00117 	ldw	ra,4(sp)
 20010dc:	df000017 	ldw	fp,0(sp)
 20010e0:	dec00204 	addi	sp,sp,8
 20010e4:	f800283a 	ret

020010e8 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 20010e8:	defff404 	addi	sp,sp,-48
 20010ec:	dfc00b15 	stw	ra,44(sp)
 20010f0:	df000a15 	stw	fp,40(sp)
 20010f4:	df000a04 	addi	fp,sp,40
 20010f8:	e13ffc15 	stw	r4,-16(fp)
 20010fc:	e17ffd15 	stw	r5,-12(fp)
 2001100:	e1bffe15 	stw	r6,-8(fp)
 2001104:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2001108:	e0bffc17 	ldw	r2,-16(fp)
 200110c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2001110:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2001114:	e13ffc17 	ldw	r4,-16(fp)
 2001118:	e17ffe17 	ldw	r5,-8(fp)
 200111c:	2000fe00 	call	2000fe0 <alt_epcs_test_address>
 2001120:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2001124:	e0bff917 	ldw	r2,-28(fp)
 2001128:	10002a16 	blt	r2,zero,20011d4 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200112c:	00002706 	br	20011cc <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2001130:	e0bff817 	ldw	r2,-32(fp)
 2001134:	10c03017 	ldw	r3,192(r2)
 2001138:	e0bffe17 	ldw	r2,-8(fp)
 200113c:	1887883a 	add	r3,r3,r2
 2001140:	e0bff817 	ldw	r2,-32(fp)
 2001144:	10803017 	ldw	r2,192(r2)
 2001148:	0085c83a 	sub	r2,zero,r2
 200114c:	1884703a 	and	r2,r3,r2
 2001150:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2001154:	e0fffa17 	ldw	r3,-24(fp)
 2001158:	e0bffe17 	ldw	r2,-8(fp)
 200115c:	1885c83a 	sub	r2,r3,r2
 2001160:	e0c00217 	ldw	r3,8(fp)
 2001164:	1880010e 	bge	r3,r2,200116c <alt_epcs_flash_write_block+0x84>
 2001168:	1805883a 	mov	r2,r3
 200116c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2001170:	e0bff817 	ldw	r2,-32(fp)
 2001174:	10c02d17 	ldw	r3,180(r2)
 2001178:	e0bff717 	ldw	r2,-36(fp)
 200117c:	e13fff17 	ldw	r4,-4(fp)
 2001180:	2085883a 	add	r2,r4,r2
 2001184:	e13ff817 	ldw	r4,-32(fp)
 2001188:	21003117 	ldw	r4,196(r4)
 200118c:	d9000015 	stw	r4,0(sp)
 2001190:	1809883a 	mov	r4,r3
 2001194:	e17ffe17 	ldw	r5,-8(fp)
 2001198:	100d883a 	mov	r6,r2
 200119c:	e1fffb17 	ldw	r7,-20(fp)
 20011a0:	20021280 	call	2002128 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 20011a4:	e0c00217 	ldw	r3,8(fp)
 20011a8:	e0bffb17 	ldw	r2,-20(fp)
 20011ac:	1885c83a 	sub	r2,r3,r2
 20011b0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 20011b4:	e0fff717 	ldw	r3,-36(fp)
 20011b8:	e0bffb17 	ldw	r2,-20(fp)
 20011bc:	1885883a 	add	r2,r3,r2
 20011c0:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 20011c4:	e0bffa17 	ldw	r2,-24(fp)
 20011c8:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20011cc:	e0800217 	ldw	r2,8(fp)
 20011d0:	103fd71e 	bne	r2,zero,2001130 <__reset+0xfe000130>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 20011d4:	e0bff917 	ldw	r2,-28(fp)
}
 20011d8:	e037883a 	mov	sp,fp
 20011dc:	dfc00117 	ldw	ra,4(sp)
 20011e0:	df000017 	ldw	fp,0(sp)
 20011e4:	dec00204 	addi	sp,sp,8
 20011e8:	f800283a 	ret

020011ec <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20011ec:	defff704 	addi	sp,sp,-36
 20011f0:	dfc00815 	stw	ra,32(sp)
 20011f4:	df000715 	stw	fp,28(sp)
 20011f8:	df000704 	addi	fp,sp,28
 20011fc:	e13ffc15 	stw	r4,-16(fp)
 2001200:	e17ffd15 	stw	r5,-12(fp)
 2001204:	e1bffe15 	stw	r6,-8(fp)
 2001208:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200120c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2001210:	e0bffc17 	ldw	r2,-16(fp)
 2001214:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2001218:	e13ffc17 	ldw	r4,-16(fp)
 200121c:	e17ffd17 	ldw	r5,-12(fp)
 2001220:	2000fe00 	call	2000fe0 <alt_epcs_test_address>
 2001224:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 2001228:	e0bffa17 	ldw	r2,-24(fp)
 200122c:	10000f16 	blt	r2,zero,200126c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2001230:	e0bffb17 	ldw	r2,-20(fp)
 2001234:	10802d17 	ldw	r2,180(r2)
 2001238:	e0fffb17 	ldw	r3,-20(fp)
 200123c:	18c03117 	ldw	r3,196(r3)
 2001240:	d8c00015 	stw	r3,0(sp)
 2001244:	1009883a 	mov	r4,r2
 2001248:	e17ffd17 	ldw	r5,-12(fp)
 200124c:	e1bffe17 	ldw	r6,-8(fp)
 2001250:	e1ffff17 	ldw	r7,-4(fp)
 2001254:	2001f7c0 	call	2001f7c <epcs_read_buffer>
 2001258:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200125c:	e0fffa17 	ldw	r3,-24(fp)
 2001260:	e0bfff17 	ldw	r2,-4(fp)
 2001264:	1880011e 	bne	r3,r2,200126c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2001268:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 200126c:	e0bffa17 	ldw	r2,-24(fp)
}
 2001270:	e037883a 	mov	sp,fp
 2001274:	dfc00117 	ldw	ra,4(sp)
 2001278:	df000017 	ldw	fp,0(sp)
 200127c:	dec00204 	addi	sp,sp,8
 2001280:	f800283a 	ret

02001284 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2001284:	defffa04 	addi	sp,sp,-24
 2001288:	dfc00515 	stw	ra,20(sp)
 200128c:	df000415 	stw	fp,16(sp)
 2001290:	df000404 	addi	fp,sp,16
 2001294:	e13ffd15 	stw	r4,-12(fp)
 2001298:	e17ffe15 	stw	r5,-8(fp)
 200129c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20012a0:	e0bffd17 	ldw	r2,-12(fp)
 20012a4:	10800017 	ldw	r2,0(r2)
 20012a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20012ac:	e0bffc17 	ldw	r2,-16(fp)
 20012b0:	10c00a04 	addi	r3,r2,40
 20012b4:	e0bffd17 	ldw	r2,-12(fp)
 20012b8:	10800217 	ldw	r2,8(r2)
 20012bc:	1809883a 	mov	r4,r3
 20012c0:	e17ffe17 	ldw	r5,-8(fp)
 20012c4:	e1bfff17 	ldw	r6,-4(fp)
 20012c8:	100f883a 	mov	r7,r2
 20012cc:	200189c0 	call	200189c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20012d0:	e037883a 	mov	sp,fp
 20012d4:	dfc00117 	ldw	ra,4(sp)
 20012d8:	df000017 	ldw	fp,0(sp)
 20012dc:	dec00204 	addi	sp,sp,8
 20012e0:	f800283a 	ret

020012e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20012e4:	defffa04 	addi	sp,sp,-24
 20012e8:	dfc00515 	stw	ra,20(sp)
 20012ec:	df000415 	stw	fp,16(sp)
 20012f0:	df000404 	addi	fp,sp,16
 20012f4:	e13ffd15 	stw	r4,-12(fp)
 20012f8:	e17ffe15 	stw	r5,-8(fp)
 20012fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2001300:	e0bffd17 	ldw	r2,-12(fp)
 2001304:	10800017 	ldw	r2,0(r2)
 2001308:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200130c:	e0bffc17 	ldw	r2,-16(fp)
 2001310:	10c00a04 	addi	r3,r2,40
 2001314:	e0bffd17 	ldw	r2,-12(fp)
 2001318:	10800217 	ldw	r2,8(r2)
 200131c:	1809883a 	mov	r4,r3
 2001320:	e17ffe17 	ldw	r5,-8(fp)
 2001324:	e1bfff17 	ldw	r6,-4(fp)
 2001328:	100f883a 	mov	r7,r2
 200132c:	2001aa40 	call	2001aa4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2001330:	e037883a 	mov	sp,fp
 2001334:	dfc00117 	ldw	ra,4(sp)
 2001338:	df000017 	ldw	fp,0(sp)
 200133c:	dec00204 	addi	sp,sp,8
 2001340:	f800283a 	ret

02001344 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2001344:	defffc04 	addi	sp,sp,-16
 2001348:	dfc00315 	stw	ra,12(sp)
 200134c:	df000215 	stw	fp,8(sp)
 2001350:	df000204 	addi	fp,sp,8
 2001354:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2001358:	e0bfff17 	ldw	r2,-4(fp)
 200135c:	10800017 	ldw	r2,0(r2)
 2001360:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2001364:	e0bffe17 	ldw	r2,-8(fp)
 2001368:	10c00a04 	addi	r3,r2,40
 200136c:	e0bfff17 	ldw	r2,-4(fp)
 2001370:	10800217 	ldw	r2,8(r2)
 2001374:	1809883a 	mov	r4,r3
 2001378:	100b883a 	mov	r5,r2
 200137c:	20017480 	call	2001748 <altera_avalon_jtag_uart_close>
}
 2001380:	e037883a 	mov	sp,fp
 2001384:	dfc00117 	ldw	ra,4(sp)
 2001388:	df000017 	ldw	fp,0(sp)
 200138c:	dec00204 	addi	sp,sp,8
 2001390:	f800283a 	ret

02001394 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2001394:	defffa04 	addi	sp,sp,-24
 2001398:	dfc00515 	stw	ra,20(sp)
 200139c:	df000415 	stw	fp,16(sp)
 20013a0:	df000404 	addi	fp,sp,16
 20013a4:	e13ffd15 	stw	r4,-12(fp)
 20013a8:	e17ffe15 	stw	r5,-8(fp)
 20013ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20013b0:	e0bffd17 	ldw	r2,-12(fp)
 20013b4:	10800017 	ldw	r2,0(r2)
 20013b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20013bc:	e0bffc17 	ldw	r2,-16(fp)
 20013c0:	10800a04 	addi	r2,r2,40
 20013c4:	1009883a 	mov	r4,r2
 20013c8:	e17ffe17 	ldw	r5,-8(fp)
 20013cc:	e1bfff17 	ldw	r6,-4(fp)
 20013d0:	20017b00 	call	20017b0 <altera_avalon_jtag_uart_ioctl>
}
 20013d4:	e037883a 	mov	sp,fp
 20013d8:	dfc00117 	ldw	ra,4(sp)
 20013dc:	df000017 	ldw	fp,0(sp)
 20013e0:	dec00204 	addi	sp,sp,8
 20013e4:	f800283a 	ret

020013e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20013e8:	defffa04 	addi	sp,sp,-24
 20013ec:	dfc00515 	stw	ra,20(sp)
 20013f0:	df000415 	stw	fp,16(sp)
 20013f4:	df000404 	addi	fp,sp,16
 20013f8:	e13ffd15 	stw	r4,-12(fp)
 20013fc:	e17ffe15 	stw	r5,-8(fp)
 2001400:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001404:	e0bffd17 	ldw	r2,-12(fp)
 2001408:	00c00044 	movi	r3,1
 200140c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2001410:	e0bffd17 	ldw	r2,-12(fp)
 2001414:	10800017 	ldw	r2,0(r2)
 2001418:	10800104 	addi	r2,r2,4
 200141c:	e0fffd17 	ldw	r3,-12(fp)
 2001420:	18c00817 	ldw	r3,32(r3)
 2001424:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2001428:	e0fffe17 	ldw	r3,-8(fp)
 200142c:	e0bfff17 	ldw	r2,-4(fp)
 2001430:	d8000015 	stw	zero,0(sp)
 2001434:	1809883a 	mov	r4,r3
 2001438:	100b883a 	mov	r5,r2
 200143c:	01808034 	movhi	r6,512
 2001440:	31852a04 	addi	r6,r6,5288
 2001444:	e1fffd17 	ldw	r7,-12(fp)
 2001448:	20003700 	call	2000370 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200144c:	e0bffd17 	ldw	r2,-12(fp)
 2001450:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2001454:	e0bffd17 	ldw	r2,-12(fp)
 2001458:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200145c:	00808034 	movhi	r2,512
 2001460:	10941b04 	addi	r2,r2,20588
 2001464:	10800017 	ldw	r2,0(r2)
 2001468:	1809883a 	mov	r4,r3
 200146c:	100b883a 	mov	r5,r2
 2001470:	01808034 	movhi	r6,512
 2001474:	3185a904 	addi	r6,r6,5796
 2001478:	e1fffd17 	ldw	r7,-12(fp)
 200147c:	20023e40 	call	20023e4 <alt_alarm_start>
 2001480:	1000040e 	bge	r2,zero,2001494 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2001484:	e0bffd17 	ldw	r2,-12(fp)
 2001488:	00e00034 	movhi	r3,32768
 200148c:	18ffffc4 	addi	r3,r3,-1
 2001490:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2001494:	e037883a 	mov	sp,fp
 2001498:	dfc00117 	ldw	ra,4(sp)
 200149c:	df000017 	ldw	fp,0(sp)
 20014a0:	dec00204 	addi	sp,sp,8
 20014a4:	f800283a 	ret

020014a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20014a8:	defff804 	addi	sp,sp,-32
 20014ac:	df000715 	stw	fp,28(sp)
 20014b0:	df000704 	addi	fp,sp,28
 20014b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20014b8:	e0bfff17 	ldw	r2,-4(fp)
 20014bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 20014c0:	e0bffb17 	ldw	r2,-20(fp)
 20014c4:	10800017 	ldw	r2,0(r2)
 20014c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20014cc:	e0bffc17 	ldw	r2,-16(fp)
 20014d0:	10800104 	addi	r2,r2,4
 20014d4:	10800037 	ldwio	r2,0(r2)
 20014d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20014dc:	e0bffd17 	ldw	r2,-12(fp)
 20014e0:	1080c00c 	andi	r2,r2,768
 20014e4:	1000011e 	bne	r2,zero,20014ec <altera_avalon_jtag_uart_irq+0x44>
      break;
 20014e8:	00006a06 	br	2001694 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20014ec:	e0bffd17 	ldw	r2,-12(fp)
 20014f0:	1080400c 	andi	r2,r2,256
 20014f4:	10003226 	beq	r2,zero,20015c0 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20014f8:	00800074 	movhi	r2,1
 20014fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001500:	e0bffb17 	ldw	r2,-20(fp)
 2001504:	10800a17 	ldw	r2,40(r2)
 2001508:	10800044 	addi	r2,r2,1
 200150c:	1081ffcc 	andi	r2,r2,2047
 2001510:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2001514:	e0bffb17 	ldw	r2,-20(fp)
 2001518:	10c00b17 	ldw	r3,44(r2)
 200151c:	e0bffe17 	ldw	r2,-8(fp)
 2001520:	1880011e 	bne	r3,r2,2001528 <altera_avalon_jtag_uart_irq+0x80>
          break;
 2001524:	00001506 	br	200157c <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2001528:	e0bffc17 	ldw	r2,-16(fp)
 200152c:	10800037 	ldwio	r2,0(r2)
 2001530:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2001534:	e0bff917 	ldw	r2,-28(fp)
 2001538:	10a0000c 	andi	r2,r2,32768
 200153c:	1000011e 	bne	r2,zero,2001544 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 2001540:	00000e06 	br	200157c <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2001544:	e0bffb17 	ldw	r2,-20(fp)
 2001548:	10800a17 	ldw	r2,40(r2)
 200154c:	e0fff917 	ldw	r3,-28(fp)
 2001550:	e13ffb17 	ldw	r4,-20(fp)
 2001554:	2085883a 	add	r2,r4,r2
 2001558:	10800e04 	addi	r2,r2,56
 200155c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001560:	e0bffb17 	ldw	r2,-20(fp)
 2001564:	10800a17 	ldw	r2,40(r2)
 2001568:	10800044 	addi	r2,r2,1
 200156c:	10c1ffcc 	andi	r3,r2,2047
 2001570:	e0bffb17 	ldw	r2,-20(fp)
 2001574:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2001578:	003fe106 	br	2001500 <__reset+0xfe000500>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200157c:	e0bff917 	ldw	r2,-28(fp)
 2001580:	10bfffec 	andhi	r2,r2,65535
 2001584:	10000e26 	beq	r2,zero,20015c0 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001588:	e0bffb17 	ldw	r2,-20(fp)
 200158c:	10c00817 	ldw	r3,32(r2)
 2001590:	00bfff84 	movi	r2,-2
 2001594:	1886703a 	and	r3,r3,r2
 2001598:	e0bffb17 	ldw	r2,-20(fp)
 200159c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20015a0:	e0bffc17 	ldw	r2,-16(fp)
 20015a4:	10800104 	addi	r2,r2,4
 20015a8:	e0fffb17 	ldw	r3,-20(fp)
 20015ac:	18c00817 	ldw	r3,32(r3)
 20015b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20015b4:	e0bffc17 	ldw	r2,-16(fp)
 20015b8:	10800104 	addi	r2,r2,4
 20015bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 20015c0:	e0bffd17 	ldw	r2,-12(fp)
 20015c4:	1080800c 	andi	r2,r2,512
 20015c8:	10003126 	beq	r2,zero,2001690 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20015cc:	e0bffd17 	ldw	r2,-12(fp)
 20015d0:	1004d43a 	srli	r2,r2,16
 20015d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20015d8:	00001406 	br	200162c <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20015dc:	e0bffc17 	ldw	r2,-16(fp)
 20015e0:	e0fffb17 	ldw	r3,-20(fp)
 20015e4:	18c00d17 	ldw	r3,52(r3)
 20015e8:	e13ffb17 	ldw	r4,-20(fp)
 20015ec:	20c7883a 	add	r3,r4,r3
 20015f0:	18c20e04 	addi	r3,r3,2104
 20015f4:	18c00003 	ldbu	r3,0(r3)
 20015f8:	18c03fcc 	andi	r3,r3,255
 20015fc:	18c0201c 	xori	r3,r3,128
 2001600:	18ffe004 	addi	r3,r3,-128
 2001604:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001608:	e0bffb17 	ldw	r2,-20(fp)
 200160c:	10800d17 	ldw	r2,52(r2)
 2001610:	10800044 	addi	r2,r2,1
 2001614:	10c1ffcc 	andi	r3,r2,2047
 2001618:	e0bffb17 	ldw	r2,-20(fp)
 200161c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2001620:	e0bffa17 	ldw	r2,-24(fp)
 2001624:	10bfffc4 	addi	r2,r2,-1
 2001628:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200162c:	e0bffa17 	ldw	r2,-24(fp)
 2001630:	10000526 	beq	r2,zero,2001648 <altera_avalon_jtag_uart_irq+0x1a0>
 2001634:	e0bffb17 	ldw	r2,-20(fp)
 2001638:	10c00d17 	ldw	r3,52(r2)
 200163c:	e0bffb17 	ldw	r2,-20(fp)
 2001640:	10800c17 	ldw	r2,48(r2)
 2001644:	18bfe51e 	bne	r3,r2,20015dc <__reset+0xfe0005dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2001648:	e0bffa17 	ldw	r2,-24(fp)
 200164c:	10001026 	beq	r2,zero,2001690 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2001650:	e0bffb17 	ldw	r2,-20(fp)
 2001654:	10c00817 	ldw	r3,32(r2)
 2001658:	00bfff44 	movi	r2,-3
 200165c:	1886703a 	and	r3,r3,r2
 2001660:	e0bffb17 	ldw	r2,-20(fp)
 2001664:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001668:	e0bffb17 	ldw	r2,-20(fp)
 200166c:	10800017 	ldw	r2,0(r2)
 2001670:	10800104 	addi	r2,r2,4
 2001674:	e0fffb17 	ldw	r3,-20(fp)
 2001678:	18c00817 	ldw	r3,32(r3)
 200167c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2001680:	e0bffc17 	ldw	r2,-16(fp)
 2001684:	10800104 	addi	r2,r2,4
 2001688:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200168c:	003f8f06 	br	20014cc <__reset+0xfe0004cc>
 2001690:	003f8e06 	br	20014cc <__reset+0xfe0004cc>
}
 2001694:	e037883a 	mov	sp,fp
 2001698:	df000017 	ldw	fp,0(sp)
 200169c:	dec00104 	addi	sp,sp,4
 20016a0:	f800283a 	ret

020016a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20016a4:	defff804 	addi	sp,sp,-32
 20016a8:	df000715 	stw	fp,28(sp)
 20016ac:	df000704 	addi	fp,sp,28
 20016b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 20016b4:	e0bffb17 	ldw	r2,-20(fp)
 20016b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 20016bc:	e0bff917 	ldw	r2,-28(fp)
 20016c0:	10800017 	ldw	r2,0(r2)
 20016c4:	10800104 	addi	r2,r2,4
 20016c8:	10800037 	ldwio	r2,0(r2)
 20016cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20016d0:	e0bffa17 	ldw	r2,-24(fp)
 20016d4:	1081000c 	andi	r2,r2,1024
 20016d8:	10000a26 	beq	r2,zero,2001704 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20016dc:	e0bff917 	ldw	r2,-28(fp)
 20016e0:	10800017 	ldw	r2,0(r2)
 20016e4:	10800104 	addi	r2,r2,4
 20016e8:	e0fff917 	ldw	r3,-28(fp)
 20016ec:	18c00817 	ldw	r3,32(r3)
 20016f0:	18c10014 	ori	r3,r3,1024
 20016f4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 20016f8:	e0bff917 	ldw	r2,-28(fp)
 20016fc:	10000915 	stw	zero,36(r2)
 2001700:	00000a06 	br	200172c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2001704:	e0bff917 	ldw	r2,-28(fp)
 2001708:	10800917 	ldw	r2,36(r2)
 200170c:	00e00034 	movhi	r3,32768
 2001710:	18ffff04 	addi	r3,r3,-4
 2001714:	18800536 	bltu	r3,r2,200172c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 2001718:	e0bff917 	ldw	r2,-28(fp)
 200171c:	10800917 	ldw	r2,36(r2)
 2001720:	10c00044 	addi	r3,r2,1
 2001724:	e0bff917 	ldw	r2,-28(fp)
 2001728:	10c00915 	stw	r3,36(r2)
 200172c:	00808034 	movhi	r2,512
 2001730:	10941b04 	addi	r2,r2,20588
 2001734:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2001738:	e037883a 	mov	sp,fp
 200173c:	df000017 	ldw	fp,0(sp)
 2001740:	dec00104 	addi	sp,sp,4
 2001744:	f800283a 	ret

02001748 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2001748:	defffd04 	addi	sp,sp,-12
 200174c:	df000215 	stw	fp,8(sp)
 2001750:	df000204 	addi	fp,sp,8
 2001754:	e13ffe15 	stw	r4,-8(fp)
 2001758:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200175c:	00000506 	br	2001774 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2001760:	e0bfff17 	ldw	r2,-4(fp)
 2001764:	1090000c 	andi	r2,r2,16384
 2001768:	10000226 	beq	r2,zero,2001774 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200176c:	00bffd44 	movi	r2,-11
 2001770:	00000b06 	br	20017a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2001774:	e0bffe17 	ldw	r2,-8(fp)
 2001778:	10c00d17 	ldw	r3,52(r2)
 200177c:	e0bffe17 	ldw	r2,-8(fp)
 2001780:	10800c17 	ldw	r2,48(r2)
 2001784:	18800526 	beq	r3,r2,200179c <altera_avalon_jtag_uart_close+0x54>
 2001788:	e0bffe17 	ldw	r2,-8(fp)
 200178c:	10c00917 	ldw	r3,36(r2)
 2001790:	e0bffe17 	ldw	r2,-8(fp)
 2001794:	10800117 	ldw	r2,4(r2)
 2001798:	18bff136 	bltu	r3,r2,2001760 <__reset+0xfe000760>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200179c:	0005883a 	mov	r2,zero
}
 20017a0:	e037883a 	mov	sp,fp
 20017a4:	df000017 	ldw	fp,0(sp)
 20017a8:	dec00104 	addi	sp,sp,4
 20017ac:	f800283a 	ret

020017b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 20017b0:	defffa04 	addi	sp,sp,-24
 20017b4:	df000515 	stw	fp,20(sp)
 20017b8:	df000504 	addi	fp,sp,20
 20017bc:	e13ffd15 	stw	r4,-12(fp)
 20017c0:	e17ffe15 	stw	r5,-8(fp)
 20017c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 20017c8:	00bff9c4 	movi	r2,-25
 20017cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 20017d0:	e0bffe17 	ldw	r2,-8(fp)
 20017d4:	10da8060 	cmpeqi	r3,r2,27137
 20017d8:	1800031e 	bne	r3,zero,20017e8 <altera_avalon_jtag_uart_ioctl+0x38>
 20017dc:	109a80a0 	cmpeqi	r2,r2,27138
 20017e0:	1000191e 	bne	r2,zero,2001848 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 20017e4:	00002806 	br	2001888 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 20017e8:	e0bffd17 	ldw	r2,-12(fp)
 20017ec:	10c00117 	ldw	r3,4(r2)
 20017f0:	00a00034 	movhi	r2,32768
 20017f4:	10bfffc4 	addi	r2,r2,-1
 20017f8:	18801226 	beq	r3,r2,2001844 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 20017fc:	e0bfff17 	ldw	r2,-4(fp)
 2001800:	10800017 	ldw	r2,0(r2)
 2001804:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2001808:	e0bffc17 	ldw	r2,-16(fp)
 200180c:	10800090 	cmplti	r2,r2,2
 2001810:	1000061e 	bne	r2,zero,200182c <altera_avalon_jtag_uart_ioctl+0x7c>
 2001814:	e0fffc17 	ldw	r3,-16(fp)
 2001818:	00a00034 	movhi	r2,32768
 200181c:	10bfffc4 	addi	r2,r2,-1
 2001820:	18800226 	beq	r3,r2,200182c <altera_avalon_jtag_uart_ioctl+0x7c>
 2001824:	e0bffc17 	ldw	r2,-16(fp)
 2001828:	00000206 	br	2001834 <altera_avalon_jtag_uart_ioctl+0x84>
 200182c:	00a00034 	movhi	r2,32768
 2001830:	10bfff84 	addi	r2,r2,-2
 2001834:	e0fffd17 	ldw	r3,-12(fp)
 2001838:	18800115 	stw	r2,4(r3)
      rc = 0;
 200183c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2001840:	00001106 	br	2001888 <altera_avalon_jtag_uart_ioctl+0xd8>
 2001844:	00001006 	br	2001888 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2001848:	e0bffd17 	ldw	r2,-12(fp)
 200184c:	10c00117 	ldw	r3,4(r2)
 2001850:	00a00034 	movhi	r2,32768
 2001854:	10bfffc4 	addi	r2,r2,-1
 2001858:	18800a26 	beq	r3,r2,2001884 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200185c:	e0bffd17 	ldw	r2,-12(fp)
 2001860:	10c00917 	ldw	r3,36(r2)
 2001864:	e0bffd17 	ldw	r2,-12(fp)
 2001868:	10800117 	ldw	r2,4(r2)
 200186c:	1885803a 	cmpltu	r2,r3,r2
 2001870:	10c03fcc 	andi	r3,r2,255
 2001874:	e0bfff17 	ldw	r2,-4(fp)
 2001878:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200187c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2001880:	00000006 	br	2001884 <altera_avalon_jtag_uart_ioctl+0xd4>
 2001884:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2001888:	e0bffb17 	ldw	r2,-20(fp)
}
 200188c:	e037883a 	mov	sp,fp
 2001890:	df000017 	ldw	fp,0(sp)
 2001894:	dec00104 	addi	sp,sp,4
 2001898:	f800283a 	ret

0200189c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200189c:	defff304 	addi	sp,sp,-52
 20018a0:	dfc00c15 	stw	ra,48(sp)
 20018a4:	df000b15 	stw	fp,44(sp)
 20018a8:	df000b04 	addi	fp,sp,44
 20018ac:	e13ffc15 	stw	r4,-16(fp)
 20018b0:	e17ffd15 	stw	r5,-12(fp)
 20018b4:	e1bffe15 	stw	r6,-8(fp)
 20018b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 20018bc:	e0bffd17 	ldw	r2,-12(fp)
 20018c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20018c4:	00004906 	br	20019ec <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 20018c8:	e0bffc17 	ldw	r2,-16(fp)
 20018cc:	10800a17 	ldw	r2,40(r2)
 20018d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 20018d4:	e0bffc17 	ldw	r2,-16(fp)
 20018d8:	10800b17 	ldw	r2,44(r2)
 20018dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 20018e0:	e0fff717 	ldw	r3,-36(fp)
 20018e4:	e0bff817 	ldw	r2,-32(fp)
 20018e8:	18800536 	bltu	r3,r2,2001900 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 20018ec:	e0fff717 	ldw	r3,-36(fp)
 20018f0:	e0bff817 	ldw	r2,-32(fp)
 20018f4:	1885c83a 	sub	r2,r3,r2
 20018f8:	e0bff615 	stw	r2,-40(fp)
 20018fc:	00000406 	br	2001910 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2001900:	00c20004 	movi	r3,2048
 2001904:	e0bff817 	ldw	r2,-32(fp)
 2001908:	1885c83a 	sub	r2,r3,r2
 200190c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2001910:	e0bff617 	ldw	r2,-40(fp)
 2001914:	1000011e 	bne	r2,zero,200191c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 2001918:	00001d06 	br	2001990 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 200191c:	e0fffe17 	ldw	r3,-8(fp)
 2001920:	e0bff617 	ldw	r2,-40(fp)
 2001924:	1880022e 	bgeu	r3,r2,2001930 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2001928:	e0bffe17 	ldw	r2,-8(fp)
 200192c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2001930:	e0bff817 	ldw	r2,-32(fp)
 2001934:	10800e04 	addi	r2,r2,56
 2001938:	e0fffc17 	ldw	r3,-16(fp)
 200193c:	1885883a 	add	r2,r3,r2
 2001940:	e13ff517 	ldw	r4,-44(fp)
 2001944:	100b883a 	mov	r5,r2
 2001948:	e1bff617 	ldw	r6,-40(fp)
 200194c:	20034480 	call	2003448 <memcpy>
      ptr   += n;
 2001950:	e0fff517 	ldw	r3,-44(fp)
 2001954:	e0bff617 	ldw	r2,-40(fp)
 2001958:	1885883a 	add	r2,r3,r2
 200195c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2001960:	e0fffe17 	ldw	r3,-8(fp)
 2001964:	e0bff617 	ldw	r2,-40(fp)
 2001968:	1885c83a 	sub	r2,r3,r2
 200196c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001970:	e0fff817 	ldw	r3,-32(fp)
 2001974:	e0bff617 	ldw	r2,-40(fp)
 2001978:	1885883a 	add	r2,r3,r2
 200197c:	10c1ffcc 	andi	r3,r2,2047
 2001980:	e0bffc17 	ldw	r2,-16(fp)
 2001984:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2001988:	e0bffe17 	ldw	r2,-8(fp)
 200198c:	00bfce16 	blt	zero,r2,20018c8 <__reset+0xfe0008c8>

    /* If we read any data then return it */
    if (ptr != buffer)
 2001990:	e0fff517 	ldw	r3,-44(fp)
 2001994:	e0bffd17 	ldw	r2,-12(fp)
 2001998:	18800126 	beq	r3,r2,20019a0 <altera_avalon_jtag_uart_read+0x104>
      break;
 200199c:	00001506 	br	20019f4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 20019a0:	e0bfff17 	ldw	r2,-4(fp)
 20019a4:	1090000c 	andi	r2,r2,16384
 20019a8:	10000126 	beq	r2,zero,20019b0 <altera_avalon_jtag_uart_read+0x114>
      break;
 20019ac:	00001106 	br	20019f4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 20019b0:	0001883a 	nop
 20019b4:	e0bffc17 	ldw	r2,-16(fp)
 20019b8:	10c00a17 	ldw	r3,40(r2)
 20019bc:	e0bff717 	ldw	r2,-36(fp)
 20019c0:	1880051e 	bne	r3,r2,20019d8 <altera_avalon_jtag_uart_read+0x13c>
 20019c4:	e0bffc17 	ldw	r2,-16(fp)
 20019c8:	10c00917 	ldw	r3,36(r2)
 20019cc:	e0bffc17 	ldw	r2,-16(fp)
 20019d0:	10800117 	ldw	r2,4(r2)
 20019d4:	18bff736 	bltu	r3,r2,20019b4 <__reset+0xfe0009b4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20019d8:	e0bffc17 	ldw	r2,-16(fp)
 20019dc:	10c00a17 	ldw	r3,40(r2)
 20019e0:	e0bff717 	ldw	r2,-36(fp)
 20019e4:	1880011e 	bne	r3,r2,20019ec <altera_avalon_jtag_uart_read+0x150>
      break;
 20019e8:	00000206 	br	20019f4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20019ec:	e0bffe17 	ldw	r2,-8(fp)
 20019f0:	00bfb516 	blt	zero,r2,20018c8 <__reset+0xfe0008c8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 20019f4:	e0fff517 	ldw	r3,-44(fp)
 20019f8:	e0bffd17 	ldw	r2,-12(fp)
 20019fc:	18801726 	beq	r3,r2,2001a5c <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001a00:	0005303a 	rdctl	r2,status
 2001a04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001a08:	e0fffa17 	ldw	r3,-24(fp)
 2001a0c:	00bfff84 	movi	r2,-2
 2001a10:	1884703a 	and	r2,r3,r2
 2001a14:	1001703a 	wrctl	status,r2
  
  return context;
 2001a18:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2001a1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2001a20:	e0bffc17 	ldw	r2,-16(fp)
 2001a24:	10800817 	ldw	r2,32(r2)
 2001a28:	10c00054 	ori	r3,r2,1
 2001a2c:	e0bffc17 	ldw	r2,-16(fp)
 2001a30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001a34:	e0bffc17 	ldw	r2,-16(fp)
 2001a38:	10800017 	ldw	r2,0(r2)
 2001a3c:	10800104 	addi	r2,r2,4
 2001a40:	e0fffc17 	ldw	r3,-16(fp)
 2001a44:	18c00817 	ldw	r3,32(r3)
 2001a48:	10c00035 	stwio	r3,0(r2)
 2001a4c:	e0bff917 	ldw	r2,-28(fp)
 2001a50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001a54:	e0bffb17 	ldw	r2,-20(fp)
 2001a58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2001a5c:	e0fff517 	ldw	r3,-44(fp)
 2001a60:	e0bffd17 	ldw	r2,-12(fp)
 2001a64:	18800426 	beq	r3,r2,2001a78 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
 2001a68:	e0fff517 	ldw	r3,-44(fp)
 2001a6c:	e0bffd17 	ldw	r2,-12(fp)
 2001a70:	1885c83a 	sub	r2,r3,r2
 2001a74:	00000606 	br	2001a90 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
 2001a78:	e0bfff17 	ldw	r2,-4(fp)
 2001a7c:	1090000c 	andi	r2,r2,16384
 2001a80:	10000226 	beq	r2,zero,2001a8c <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
 2001a84:	00bffd44 	movi	r2,-11
 2001a88:	00000106 	br	2001a90 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
 2001a8c:	00bffec4 	movi	r2,-5
}
 2001a90:	e037883a 	mov	sp,fp
 2001a94:	dfc00117 	ldw	ra,4(sp)
 2001a98:	df000017 	ldw	fp,0(sp)
 2001a9c:	dec00204 	addi	sp,sp,8
 2001aa0:	f800283a 	ret

02001aa4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2001aa4:	defff304 	addi	sp,sp,-52
 2001aa8:	dfc00c15 	stw	ra,48(sp)
 2001aac:	df000b15 	stw	fp,44(sp)
 2001ab0:	df000b04 	addi	fp,sp,44
 2001ab4:	e13ffc15 	stw	r4,-16(fp)
 2001ab8:	e17ffd15 	stw	r5,-12(fp)
 2001abc:	e1bffe15 	stw	r6,-8(fp)
 2001ac0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2001ac4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2001ac8:	e0bffd17 	ldw	r2,-12(fp)
 2001acc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2001ad0:	00003906 	br	2001bb8 <altera_avalon_jtag_uart_write+0x114>
 2001ad4:	00003806 	br	2001bb8 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2001ad8:	e0bffc17 	ldw	r2,-16(fp)
 2001adc:	10800c17 	ldw	r2,48(r2)
 2001ae0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 2001ae4:	e0bffc17 	ldw	r2,-16(fp)
 2001ae8:	10800d17 	ldw	r2,52(r2)
 2001aec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2001af0:	e0fff817 	ldw	r3,-32(fp)
 2001af4:	e0bff517 	ldw	r2,-44(fp)
 2001af8:	1880062e 	bgeu	r3,r2,2001b14 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
 2001afc:	e0fff517 	ldw	r3,-44(fp)
 2001b00:	e0bff817 	ldw	r2,-32(fp)
 2001b04:	1885c83a 	sub	r2,r3,r2
 2001b08:	10bfffc4 	addi	r2,r2,-1
 2001b0c:	e0bff615 	stw	r2,-40(fp)
 2001b10:	00000b06 	br	2001b40 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2001b14:	e0bff517 	ldw	r2,-44(fp)
 2001b18:	10000526 	beq	r2,zero,2001b30 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2001b1c:	00c20004 	movi	r3,2048
 2001b20:	e0bff817 	ldw	r2,-32(fp)
 2001b24:	1885c83a 	sub	r2,r3,r2
 2001b28:	e0bff615 	stw	r2,-40(fp)
 2001b2c:	00000406 	br	2001b40 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2001b30:	00c1ffc4 	movi	r3,2047
 2001b34:	e0bff817 	ldw	r2,-32(fp)
 2001b38:	1885c83a 	sub	r2,r3,r2
 2001b3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2001b40:	e0bff617 	ldw	r2,-40(fp)
 2001b44:	1000011e 	bne	r2,zero,2001b4c <altera_avalon_jtag_uart_write+0xa8>
        break;
 2001b48:	00001d06 	br	2001bc0 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
 2001b4c:	e0fffe17 	ldw	r3,-8(fp)
 2001b50:	e0bff617 	ldw	r2,-40(fp)
 2001b54:	1880022e 	bgeu	r3,r2,2001b60 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2001b58:	e0bffe17 	ldw	r2,-8(fp)
 2001b5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2001b60:	e0bff817 	ldw	r2,-32(fp)
 2001b64:	10820e04 	addi	r2,r2,2104
 2001b68:	e0fffc17 	ldw	r3,-16(fp)
 2001b6c:	1885883a 	add	r2,r3,r2
 2001b70:	1009883a 	mov	r4,r2
 2001b74:	e17ffd17 	ldw	r5,-12(fp)
 2001b78:	e1bff617 	ldw	r6,-40(fp)
 2001b7c:	20034480 	call	2003448 <memcpy>
      ptr   += n;
 2001b80:	e0fffd17 	ldw	r3,-12(fp)
 2001b84:	e0bff617 	ldw	r2,-40(fp)
 2001b88:	1885883a 	add	r2,r3,r2
 2001b8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2001b90:	e0fffe17 	ldw	r3,-8(fp)
 2001b94:	e0bff617 	ldw	r2,-40(fp)
 2001b98:	1885c83a 	sub	r2,r3,r2
 2001b9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2001ba0:	e0fff817 	ldw	r3,-32(fp)
 2001ba4:	e0bff617 	ldw	r2,-40(fp)
 2001ba8:	1885883a 	add	r2,r3,r2
 2001bac:	10c1ffcc 	andi	r3,r2,2047
 2001bb0:	e0bffc17 	ldw	r2,-16(fp)
 2001bb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2001bb8:	e0bffe17 	ldw	r2,-8(fp)
 2001bbc:	00bfc616 	blt	zero,r2,2001ad8 <__reset+0xfe000ad8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001bc0:	0005303a 	rdctl	r2,status
 2001bc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001bc8:	e0fffa17 	ldw	r3,-24(fp)
 2001bcc:	00bfff84 	movi	r2,-2
 2001bd0:	1884703a 	and	r2,r3,r2
 2001bd4:	1001703a 	wrctl	status,r2
  
  return context;
 2001bd8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2001bdc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2001be0:	e0bffc17 	ldw	r2,-16(fp)
 2001be4:	10800817 	ldw	r2,32(r2)
 2001be8:	10c00094 	ori	r3,r2,2
 2001bec:	e0bffc17 	ldw	r2,-16(fp)
 2001bf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2001bf4:	e0bffc17 	ldw	r2,-16(fp)
 2001bf8:	10800017 	ldw	r2,0(r2)
 2001bfc:	10800104 	addi	r2,r2,4
 2001c00:	e0fffc17 	ldw	r3,-16(fp)
 2001c04:	18c00817 	ldw	r3,32(r3)
 2001c08:	10c00035 	stwio	r3,0(r2)
 2001c0c:	e0bff917 	ldw	r2,-28(fp)
 2001c10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001c14:	e0bffb17 	ldw	r2,-20(fp)
 2001c18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2001c1c:	e0bffe17 	ldw	r2,-8(fp)
 2001c20:	0080120e 	bge	zero,r2,2001c6c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 2001c24:	e0bfff17 	ldw	r2,-4(fp)
 2001c28:	1090000c 	andi	r2,r2,16384
 2001c2c:	10000126 	beq	r2,zero,2001c34 <altera_avalon_jtag_uart_write+0x190>
        break;
 2001c30:	00001006 	br	2001c74 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2001c34:	0001883a 	nop
 2001c38:	e0bffc17 	ldw	r2,-16(fp)
 2001c3c:	10c00d17 	ldw	r3,52(r2)
 2001c40:	e0bff517 	ldw	r2,-44(fp)
 2001c44:	1880051e 	bne	r3,r2,2001c5c <altera_avalon_jtag_uart_write+0x1b8>
 2001c48:	e0bffc17 	ldw	r2,-16(fp)
 2001c4c:	10c00917 	ldw	r3,36(r2)
 2001c50:	e0bffc17 	ldw	r2,-16(fp)
 2001c54:	10800117 	ldw	r2,4(r2)
 2001c58:	18bff736 	bltu	r3,r2,2001c38 <__reset+0xfe000c38>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2001c5c:	e0bffc17 	ldw	r2,-16(fp)
 2001c60:	10800917 	ldw	r2,36(r2)
 2001c64:	10000126 	beq	r2,zero,2001c6c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 2001c68:	00000206 	br	2001c74 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 2001c6c:	e0bffe17 	ldw	r2,-8(fp)
 2001c70:	00bf9816 	blt	zero,r2,2001ad4 <__reset+0xfe000ad4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2001c74:	e0fffd17 	ldw	r3,-12(fp)
 2001c78:	e0bff717 	ldw	r2,-36(fp)
 2001c7c:	18800426 	beq	r3,r2,2001c90 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 2001c80:	e0fffd17 	ldw	r3,-12(fp)
 2001c84:	e0bff717 	ldw	r2,-36(fp)
 2001c88:	1885c83a 	sub	r2,r3,r2
 2001c8c:	00000606 	br	2001ca8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 2001c90:	e0bfff17 	ldw	r2,-4(fp)
 2001c94:	1090000c 	andi	r2,r2,16384
 2001c98:	10000226 	beq	r2,zero,2001ca4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 2001c9c:	00bffd44 	movi	r2,-11
 2001ca0:	00000106 	br	2001ca8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2001ca4:	00bffec4 	movi	r2,-5
}
 2001ca8:	e037883a 	mov	sp,fp
 2001cac:	dfc00117 	ldw	ra,4(sp)
 2001cb0:	df000017 	ldw	fp,0(sp)
 2001cb4:	dec00204 	addi	sp,sp,8
 2001cb8:	f800283a 	ret

02001cbc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2001cbc:	defffa04 	addi	sp,sp,-24
 2001cc0:	dfc00515 	stw	ra,20(sp)
 2001cc4:	df000415 	stw	fp,16(sp)
 2001cc8:	df000404 	addi	fp,sp,16
 2001ccc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2001cd0:	0007883a 	mov	r3,zero
 2001cd4:	e0bfff17 	ldw	r2,-4(fp)
 2001cd8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2001cdc:	e0bfff17 	ldw	r2,-4(fp)
 2001ce0:	10800104 	addi	r2,r2,4
 2001ce4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2001ce8:	0005303a 	rdctl	r2,status
 2001cec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2001cf0:	e0fffd17 	ldw	r3,-12(fp)
 2001cf4:	00bfff84 	movi	r2,-2
 2001cf8:	1884703a 	and	r2,r3,r2
 2001cfc:	1001703a 	wrctl	status,r2
  
  return context;
 2001d00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2001d04:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2001d08:	2002e080 	call	2002e08 <alt_tick>
 2001d0c:	e0bffc17 	ldw	r2,-16(fp)
 2001d10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2001d14:	e0bffe17 	ldw	r2,-8(fp)
 2001d18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2001d1c:	e037883a 	mov	sp,fp
 2001d20:	dfc00117 	ldw	ra,4(sp)
 2001d24:	df000017 	ldw	fp,0(sp)
 2001d28:	dec00204 	addi	sp,sp,8
 2001d2c:	f800283a 	ret

02001d30 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2001d30:	defff804 	addi	sp,sp,-32
 2001d34:	dfc00715 	stw	ra,28(sp)
 2001d38:	df000615 	stw	fp,24(sp)
 2001d3c:	df000604 	addi	fp,sp,24
 2001d40:	e13ffc15 	stw	r4,-16(fp)
 2001d44:	e17ffd15 	stw	r5,-12(fp)
 2001d48:	e1bffe15 	stw	r6,-8(fp)
 2001d4c:	e1ffff15 	stw	r7,-4(fp)
 2001d50:	e0bfff17 	ldw	r2,-4(fp)
 2001d54:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2001d58:	00808034 	movhi	r2,512
 2001d5c:	10941b04 	addi	r2,r2,20588
 2001d60:	10800017 	ldw	r2,0(r2)
 2001d64:	1000041e 	bne	r2,zero,2001d78 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 2001d68:	00808034 	movhi	r2,512
 2001d6c:	10941b04 	addi	r2,r2,20588
 2001d70:	e0fffb17 	ldw	r3,-20(fp)
 2001d74:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2001d78:	e0bffc17 	ldw	r2,-16(fp)
 2001d7c:	10800104 	addi	r2,r2,4
 2001d80:	00c001c4 	movi	r3,7
 2001d84:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2001d88:	d8000015 	stw	zero,0(sp)
 2001d8c:	e13ffd17 	ldw	r4,-12(fp)
 2001d90:	e17ffe17 	ldw	r5,-8(fp)
 2001d94:	01808034 	movhi	r6,512
 2001d98:	31872f04 	addi	r6,r6,7356
 2001d9c:	e1fffc17 	ldw	r7,-16(fp)
 2001da0:	20003700 	call	2000370 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2001da4:	e037883a 	mov	sp,fp
 2001da8:	dfc00117 	ldw	ra,4(sp)
 2001dac:	df000017 	ldw	fp,0(sp)
 2001db0:	dec00204 	addi	sp,sp,8
 2001db4:	f800283a 	ret

02001db8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2001db8:	defff904 	addi	sp,sp,-28
 2001dbc:	dfc00615 	stw	ra,24(sp)
 2001dc0:	df000515 	stw	fp,20(sp)
 2001dc4:	df000504 	addi	fp,sp,20
 2001dc8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2001dcc:	00800144 	movi	r2,5
 2001dd0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2001dd4:	00800044 	movi	r2,1
 2001dd8:	d8800015 	stw	r2,0(sp)
 2001ddc:	e0bffe44 	addi	r2,fp,-7
 2001de0:	d8800115 	stw	r2,4(sp)
 2001de4:	d8000215 	stw	zero,8(sp)
 2001de8:	e13fff17 	ldw	r4,-4(fp)
 2001dec:	000b883a 	mov	r5,zero
 2001df0:	01800044 	movi	r6,1
 2001df4:	e1fffe04 	addi	r7,fp,-8
 2001df8:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2001dfc:	e0bffe43 	ldbu	r2,-7(fp)
}
 2001e00:	e037883a 	mov	sp,fp
 2001e04:	dfc00117 	ldw	ra,4(sp)
 2001e08:	df000017 	ldw	fp,0(sp)
 2001e0c:	dec00204 	addi	sp,sp,8
 2001e10:	f800283a 	ret

02001e14 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2001e14:	defffd04 	addi	sp,sp,-12
 2001e18:	dfc00215 	stw	ra,8(sp)
 2001e1c:	df000115 	stw	fp,4(sp)
 2001e20:	df000104 	addi	fp,sp,4
 2001e24:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2001e28:	e13fff17 	ldw	r4,-4(fp)
 2001e2c:	2001db80 	call	2001db8 <epcs_read_status_register>
 2001e30:	10803fcc 	andi	r2,r2,255
 2001e34:	1080004c 	andi	r2,r2,1
}
 2001e38:	e037883a 	mov	sp,fp
 2001e3c:	dfc00117 	ldw	ra,4(sp)
 2001e40:	df000017 	ldw	fp,0(sp)
 2001e44:	dec00204 	addi	sp,sp,8
 2001e48:	f800283a 	ret

02001e4c <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2001e4c:	defffd04 	addi	sp,sp,-12
 2001e50:	dfc00215 	stw	ra,8(sp)
 2001e54:	df000115 	stw	fp,4(sp)
 2001e58:	df000104 	addi	fp,sp,4
 2001e5c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2001e60:	0001883a 	nop
 2001e64:	e13fff17 	ldw	r4,-4(fp)
 2001e68:	2001e140 	call	2001e14 <epcs_test_wip>
 2001e6c:	103ffd1e 	bne	r2,zero,2001e64 <__reset+0xfe000e64>
  {
  }
}
 2001e70:	e037883a 	mov	sp,fp
 2001e74:	dfc00117 	ldw	ra,4(sp)
 2001e78:	df000017 	ldw	fp,0(sp)
 2001e7c:	dec00204 	addi	sp,sp,8
 2001e80:	f800283a 	ret

02001e84 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2001e84:	defff604 	addi	sp,sp,-40
 2001e88:	dfc00915 	stw	ra,36(sp)
 2001e8c:	df000815 	stw	fp,32(sp)
 2001e90:	df000804 	addi	fp,sp,32
 2001e94:	e13ffd15 	stw	r4,-12(fp)
 2001e98:	e17ffe15 	stw	r5,-8(fp)
 2001e9c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2001ea0:	e0bfff17 	ldw	r2,-4(fp)
 2001ea4:	10001226 	beq	r2,zero,2001ef0 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2001ea8:	00bff604 	movi	r2,-40
 2001eac:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2001eb0:	e0bffe17 	ldw	r2,-8(fp)
 2001eb4:	1004d63a 	srli	r2,r2,24
 2001eb8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2001ebc:	e0bffe17 	ldw	r2,-8(fp)
 2001ec0:	1004d43a 	srli	r2,r2,16
 2001ec4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2001ec8:	e0bffe17 	ldw	r2,-8(fp)
 2001ecc:	1004d23a 	srli	r2,r2,8
 2001ed0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2001ed4:	e0bffe17 	ldw	r2,-8(fp)
 2001ed8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2001edc:	00800144 	movi	r2,5
 2001ee0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2001ee4:	e13ffd17 	ldw	r4,-12(fp)
 2001ee8:	200232c0 	call	200232c <epcs_enter_4_bytes_mode>
 2001eec:	00000c06 	br	2001f20 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2001ef0:	00bff604 	movi	r2,-40
 2001ef4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2001ef8:	e0bffe17 	ldw	r2,-8(fp)
 2001efc:	1004d43a 	srli	r2,r2,16
 2001f00:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2001f04:	e0bffe17 	ldw	r2,-8(fp)
 2001f08:	1004d23a 	srli	r2,r2,8
 2001f0c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2001f10:	e0bffe17 	ldw	r2,-8(fp)
 2001f14:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2001f18:	00800104 	movi	r2,4
 2001f1c:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2001f20:	e13ffd17 	ldw	r4,-12(fp)
 2001f24:	20020700 	call	2002070 <epcs_write_enable>

  alt_avalon_spi_command(
 2001f28:	e0fffb03 	ldbu	r3,-20(fp)
 2001f2c:	e0bffb44 	addi	r2,fp,-19
 2001f30:	d8000015 	stw	zero,0(sp)
 2001f34:	d8000115 	stw	zero,4(sp)
 2001f38:	d8000215 	stw	zero,8(sp)
 2001f3c:	e13ffd17 	ldw	r4,-12(fp)
 2001f40:	000b883a 	mov	r5,zero
 2001f44:	180d883a 	mov	r6,r3
 2001f48:	100f883a 	mov	r7,r2
 2001f4c:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2001f50:	e13ffd17 	ldw	r4,-12(fp)
 2001f54:	2001e4c0 	call	2001e4c <epcs_await_wip_released>

  if(four_bytes_mode)
 2001f58:	e0bfff17 	ldw	r2,-4(fp)
 2001f5c:	10000226 	beq	r2,zero,2001f68 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2001f60:	e13ffd17 	ldw	r4,-12(fp)
 2001f64:	20023880 	call	2002388 <epcs_exit_4_bytes_mode>
  }
}
 2001f68:	e037883a 	mov	sp,fp
 2001f6c:	dfc00117 	ldw	ra,4(sp)
 2001f70:	df000017 	ldw	fp,0(sp)
 2001f74:	dec00204 	addi	sp,sp,8
 2001f78:	f800283a 	ret

02001f7c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2001f7c:	defff404 	addi	sp,sp,-48
 2001f80:	dfc00b15 	stw	ra,44(sp)
 2001f84:	df000a15 	stw	fp,40(sp)
 2001f88:	df000a04 	addi	fp,sp,40
 2001f8c:	e13ffc15 	stw	r4,-16(fp)
 2001f90:	e17ffd15 	stw	r5,-12(fp)
 2001f94:	e1bffe15 	stw	r6,-8(fp)
 2001f98:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2001f9c:	008000c4 	movi	r2,3
 2001fa0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2001fa4:	e0800217 	ldw	r2,8(fp)
 2001fa8:	10001026 	beq	r2,zero,2001fec <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2001fac:	e0bffd17 	ldw	r2,-12(fp)
 2001fb0:	1004d63a 	srli	r2,r2,24
 2001fb4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2001fb8:	e0bffd17 	ldw	r2,-12(fp)
 2001fbc:	1005d43a 	srai	r2,r2,16
 2001fc0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2001fc4:	e0bffd17 	ldw	r2,-12(fp)
 2001fc8:	1005d23a 	srai	r2,r2,8
 2001fcc:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2001fd0:	e0bffd17 	ldw	r2,-12(fp)
 2001fd4:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2001fd8:	00800144 	movi	r2,5
 2001fdc:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2001fe0:	e13ffc17 	ldw	r4,-16(fp)
 2001fe4:	200232c0 	call	200232c <epcs_enter_4_bytes_mode>
 2001fe8:	00000a06 	br	2002014 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2001fec:	e0bffd17 	ldw	r2,-12(fp)
 2001ff0:	1005d43a 	srai	r2,r2,16
 2001ff4:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2001ff8:	e0bffd17 	ldw	r2,-12(fp)
 2001ffc:	1005d23a 	srai	r2,r2,8
 2002000:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2002004:	e0bffd17 	ldw	r2,-12(fp)
 2002008:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 200200c:	00800104 	movi	r2,4
 2002010:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2002014:	e13ffc17 	ldw	r4,-16(fp)
 2002018:	2001e4c0 	call	2001e4c <epcs_await_wip_released>

  alt_avalon_spi_command(
 200201c:	e0ffff17 	ldw	r3,-4(fp)
 2002020:	e0bffa04 	addi	r2,fp,-24
 2002024:	d8c00015 	stw	r3,0(sp)
 2002028:	e0fffe17 	ldw	r3,-8(fp)
 200202c:	d8c00115 	stw	r3,4(sp)
 2002030:	d8000215 	stw	zero,8(sp)
 2002034:	e13ffc17 	ldw	r4,-16(fp)
 2002038:	000b883a 	mov	r5,zero
 200203c:	e1bff917 	ldw	r6,-28(fp)
 2002040:	100f883a 	mov	r7,r2
 2002044:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2002048:	e0800217 	ldw	r2,8(fp)
 200204c:	10000226 	beq	r2,zero,2002058 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2002050:	e13ffc17 	ldw	r4,-16(fp)
 2002054:	20023880 	call	2002388 <epcs_exit_4_bytes_mode>
  }

  return length;
 2002058:	e0bfff17 	ldw	r2,-4(fp)
}
 200205c:	e037883a 	mov	sp,fp
 2002060:	dfc00117 	ldw	ra,4(sp)
 2002064:	df000017 	ldw	fp,0(sp)
 2002068:	dec00204 	addi	sp,sp,8
 200206c:	f800283a 	ret

02002070 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2002070:	defff904 	addi	sp,sp,-28
 2002074:	dfc00615 	stw	ra,24(sp)
 2002078:	df000515 	stw	fp,20(sp)
 200207c:	df000504 	addi	fp,sp,20
 2002080:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2002084:	00800184 	movi	r2,6
 2002088:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 200208c:	d8000015 	stw	zero,0(sp)
 2002090:	d8000115 	stw	zero,4(sp)
 2002094:	d8000215 	stw	zero,8(sp)
 2002098:	e13fff17 	ldw	r4,-4(fp)
 200209c:	000b883a 	mov	r5,zero
 20020a0:	01800044 	movi	r6,1
 20020a4:	e1fffe04 	addi	r7,fp,-8
 20020a8:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 20020ac:	e037883a 	mov	sp,fp
 20020b0:	dfc00117 	ldw	ra,4(sp)
 20020b4:	df000017 	ldw	fp,0(sp)
 20020b8:	dec00204 	addi	sp,sp,8
 20020bc:	f800283a 	ret

020020c0 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 20020c0:	defff804 	addi	sp,sp,-32
 20020c4:	dfc00715 	stw	ra,28(sp)
 20020c8:	df000615 	stw	fp,24(sp)
 20020cc:	df000604 	addi	fp,sp,24
 20020d0:	e13ffe15 	stw	r4,-8(fp)
 20020d4:	2805883a 	mov	r2,r5
 20020d8:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 20020dc:	00800044 	movi	r2,1
 20020e0:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 20020e4:	e0bfff03 	ldbu	r2,-4(fp)
 20020e8:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 20020ec:	d8000015 	stw	zero,0(sp)
 20020f0:	d8000115 	stw	zero,4(sp)
 20020f4:	d8000215 	stw	zero,8(sp)
 20020f8:	e13ffe17 	ldw	r4,-8(fp)
 20020fc:	000b883a 	mov	r5,zero
 2002100:	01800084 	movi	r6,2
 2002104:	e1fffd04 	addi	r7,fp,-12
 2002108:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200210c:	e13ffe17 	ldw	r4,-8(fp)
 2002110:	2001e4c0 	call	2001e4c <epcs_await_wip_released>
}
 2002114:	e037883a 	mov	sp,fp
 2002118:	dfc00117 	ldw	ra,4(sp)
 200211c:	df000017 	ldw	fp,0(sp)
 2002120:	dec00204 	addi	sp,sp,8
 2002124:	f800283a 	ret

02002128 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 2002128:	defff404 	addi	sp,sp,-48
 200212c:	dfc00b15 	stw	ra,44(sp)
 2002130:	df000a15 	stw	fp,40(sp)
 2002134:	df000a04 	addi	fp,sp,40
 2002138:	e13ffc15 	stw	r4,-16(fp)
 200213c:	e17ffd15 	stw	r5,-12(fp)
 2002140:	e1bffe15 	stw	r6,-8(fp)
 2002144:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 2002148:	00800084 	movi	r2,2
 200214c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2002150:	e0800217 	ldw	r2,8(fp)
 2002154:	10001026 	beq	r2,zero,2002198 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 2002158:	e0bffd17 	ldw	r2,-12(fp)
 200215c:	1004d63a 	srli	r2,r2,24
 2002160:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2002164:	e0bffd17 	ldw	r2,-12(fp)
 2002168:	1005d43a 	srai	r2,r2,16
 200216c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2002170:	e0bffd17 	ldw	r2,-12(fp)
 2002174:	1005d23a 	srai	r2,r2,8
 2002178:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 200217c:	e0bffd17 	ldw	r2,-12(fp)
 2002180:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2002184:	00800144 	movi	r2,5
 2002188:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 200218c:	e13ffc17 	ldw	r4,-16(fp)
 2002190:	200232c0 	call	200232c <epcs_enter_4_bytes_mode>
 2002194:	00000a06 	br	20021c0 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2002198:	e0bffd17 	ldw	r2,-12(fp)
 200219c:	1005d43a 	srai	r2,r2,16
 20021a0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 20021a4:	e0bffd17 	ldw	r2,-12(fp)
 20021a8:	1005d23a 	srai	r2,r2,8
 20021ac:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 20021b0:	e0bffd17 	ldw	r2,-12(fp)
 20021b4:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 20021b8:	00800104 	movi	r2,4
 20021bc:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 20021c0:	e13ffc17 	ldw	r4,-16(fp)
 20021c4:	20020700 	call	2002070 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 20021c8:	e0bffa04 	addi	r2,fp,-24
 20021cc:	d8000015 	stw	zero,0(sp)
 20021d0:	d8000115 	stw	zero,4(sp)
 20021d4:	00c00044 	movi	r3,1
 20021d8:	d8c00215 	stw	r3,8(sp)
 20021dc:	e13ffc17 	ldw	r4,-16(fp)
 20021e0:	000b883a 	mov	r5,zero
 20021e4:	e1bff917 	ldw	r6,-28(fp)
 20021e8:	100f883a 	mov	r7,r2
 20021ec:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 20021f0:	e0bfff17 	ldw	r2,-4(fp)
 20021f4:	d8000015 	stw	zero,0(sp)
 20021f8:	d8000115 	stw	zero,4(sp)
 20021fc:	d8000215 	stw	zero,8(sp)
 2002200:	e13ffc17 	ldw	r4,-16(fp)
 2002204:	000b883a 	mov	r5,zero
 2002208:	100d883a 	mov	r6,r2
 200220c:	e1fffe17 	ldw	r7,-8(fp)
 2002210:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2002214:	e13ffc17 	ldw	r4,-16(fp)
 2002218:	2001e4c0 	call	2001e4c <epcs_await_wip_released>

  if(four_bytes_mode)
 200221c:	e0800217 	ldw	r2,8(fp)
 2002220:	10000226 	beq	r2,zero,200222c <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2002224:	e13ffc17 	ldw	r4,-16(fp)
 2002228:	20023880 	call	2002388 <epcs_exit_4_bytes_mode>
  }

  return length;
 200222c:	e0bfff17 	ldw	r2,-4(fp)
}
 2002230:	e037883a 	mov	sp,fp
 2002234:	dfc00117 	ldw	ra,4(sp)
 2002238:	df000017 	ldw	fp,0(sp)
 200223c:	dec00204 	addi	sp,sp,8
 2002240:	f800283a 	ret

02002244 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2002244:	defff804 	addi	sp,sp,-32
 2002248:	dfc00715 	stw	ra,28(sp)
 200224c:	df000615 	stw	fp,24(sp)
 2002250:	df000604 	addi	fp,sp,24
 2002254:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 2002258:	00bfeac4 	movi	r2,-85
 200225c:	e0bffd05 	stb	r2,-12(fp)
 2002260:	e03ffd45 	stb	zero,-11(fp)
 2002264:	e03ffd85 	stb	zero,-10(fp)
 2002268:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 200226c:	00800044 	movi	r2,1
 2002270:	d8800015 	stw	r2,0(sp)
 2002274:	e0bffe04 	addi	r2,fp,-8
 2002278:	d8800115 	stw	r2,4(sp)
 200227c:	d8000215 	stw	zero,8(sp)
 2002280:	e13fff17 	ldw	r4,-4(fp)
 2002284:	000b883a 	mov	r5,zero
 2002288:	01800104 	movi	r6,4
 200228c:	e1fffd04 	addi	r7,fp,-12
 2002290:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2002294:	e0bffe03 	ldbu	r2,-8(fp)
}
 2002298:	e037883a 	mov	sp,fp
 200229c:	dfc00117 	ldw	ra,4(sp)
 20022a0:	df000017 	ldw	fp,0(sp)
 20022a4:	dec00204 	addi	sp,sp,8
 20022a8:	f800283a 	ret

020022ac <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 20022ac:	defff904 	addi	sp,sp,-28
 20022b0:	dfc00615 	stw	ra,24(sp)
 20022b4:	df000515 	stw	fp,20(sp)
 20022b8:	df000504 	addi	fp,sp,20
 20022bc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 20022c0:	00bfe7c4 	movi	r2,-97
 20022c4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 20022c8:	008000c4 	movi	r2,3
 20022cc:	d8800015 	stw	r2,0(sp)
 20022d0:	e0bffe44 	addi	r2,fp,-7
 20022d4:	d8800115 	stw	r2,4(sp)
 20022d8:	d8000215 	stw	zero,8(sp)
 20022dc:	e13fff17 	ldw	r4,-4(fp)
 20022e0:	000b883a 	mov	r5,zero
 20022e4:	01800044 	movi	r6,1
 20022e8:	e1fffe04 	addi	r7,fp,-8
 20022ec:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 20022f0:	e0bffe43 	ldbu	r2,-7(fp)
 20022f4:	10803fcc 	andi	r2,r2,255
 20022f8:	1006943a 	slli	r3,r2,16
 20022fc:	e0bffe83 	ldbu	r2,-6(fp)
 2002300:	10803fcc 	andi	r2,r2,255
 2002304:	1004923a 	slli	r2,r2,8
 2002308:	1886b03a 	or	r3,r3,r2
 200230c:	e0bffec3 	ldbu	r2,-5(fp)
 2002310:	10803fcc 	andi	r2,r2,255
 2002314:	1884b03a 	or	r2,r3,r2
}
 2002318:	e037883a 	mov	sp,fp
 200231c:	dfc00117 	ldw	ra,4(sp)
 2002320:	df000017 	ldw	fp,0(sp)
 2002324:	dec00204 	addi	sp,sp,8
 2002328:	f800283a 	ret

0200232c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 200232c:	defff904 	addi	sp,sp,-28
 2002330:	dfc00615 	stw	ra,24(sp)
 2002334:	df000515 	stw	fp,20(sp)
 2002338:	df000504 	addi	fp,sp,20
 200233c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2002340:	00bfedc4 	movi	r2,-73
 2002344:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2002348:	e13fff17 	ldw	r4,-4(fp)
 200234c:	20020700 	call	2002070 <epcs_write_enable>

  alt_avalon_spi_command(
 2002350:	d8000015 	stw	zero,0(sp)
 2002354:	d8000115 	stw	zero,4(sp)
 2002358:	d8000215 	stw	zero,8(sp)
 200235c:	e13fff17 	ldw	r4,-4(fp)
 2002360:	000b883a 	mov	r5,zero
 2002364:	01800044 	movi	r6,1
 2002368:	e1fffe04 	addi	r7,fp,-8
 200236c:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2002370:	0001883a 	nop
}
 2002374:	e037883a 	mov	sp,fp
 2002378:	dfc00117 	ldw	ra,4(sp)
 200237c:	df000017 	ldw	fp,0(sp)
 2002380:	dec00204 	addi	sp,sp,8
 2002384:	f800283a 	ret

02002388 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2002388:	defff904 	addi	sp,sp,-28
 200238c:	dfc00615 	stw	ra,24(sp)
 2002390:	df000515 	stw	fp,20(sp)
 2002394:	df000504 	addi	fp,sp,20
 2002398:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 200239c:	00bffa44 	movi	r2,-23
 20023a0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20023a4:	e13fff17 	ldw	r4,-4(fp)
 20023a8:	20020700 	call	2002070 <epcs_write_enable>

  alt_avalon_spi_command(
 20023ac:	d8000015 	stw	zero,0(sp)
 20023b0:	d8000115 	stw	zero,4(sp)
 20023b4:	d8000215 	stw	zero,8(sp)
 20023b8:	e13fff17 	ldw	r4,-4(fp)
 20023bc:	000b883a 	mov	r5,zero
 20023c0:	01800044 	movi	r6,1
 20023c4:	e1fffe04 	addi	r7,fp,-8
 20023c8:	2002f2c0 	call	2002f2c <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 20023cc:	0001883a 	nop
}
 20023d0:	e037883a 	mov	sp,fp
 20023d4:	dfc00117 	ldw	ra,4(sp)
 20023d8:	df000017 	ldw	fp,0(sp)
 20023dc:	dec00204 	addi	sp,sp,8
 20023e0:	f800283a 	ret

020023e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20023e4:	defff504 	addi	sp,sp,-44
 20023e8:	df000a15 	stw	fp,40(sp)
 20023ec:	df000a04 	addi	fp,sp,40
 20023f0:	e13ffc15 	stw	r4,-16(fp)
 20023f4:	e17ffd15 	stw	r5,-12(fp)
 20023f8:	e1bffe15 	stw	r6,-8(fp)
 20023fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2002400:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2002404:	00808034 	movhi	r2,512
 2002408:	10941b04 	addi	r2,r2,20588
 200240c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2002410:	10003f26 	beq	r2,zero,2002510 <alt_alarm_start+0x12c>
  {
    if (alarm)
 2002414:	e0bffc17 	ldw	r2,-16(fp)
 2002418:	10003b26 	beq	r2,zero,2002508 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 200241c:	e0bffc17 	ldw	r2,-16(fp)
 2002420:	e0fffe17 	ldw	r3,-8(fp)
 2002424:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2002428:	e0bffc17 	ldw	r2,-16(fp)
 200242c:	e0ffff17 	ldw	r3,-4(fp)
 2002430:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002434:	0005303a 	rdctl	r2,status
 2002438:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200243c:	e0fff817 	ldw	r3,-32(fp)
 2002440:	00bfff84 	movi	r2,-2
 2002444:	1884703a 	and	r2,r3,r2
 2002448:	1001703a 	wrctl	status,r2
  
  return context;
 200244c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2002450:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2002454:	00808034 	movhi	r2,512
 2002458:	10941c04 	addi	r2,r2,20592
 200245c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2002460:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2002464:	e0fffd17 	ldw	r3,-12(fp)
 2002468:	e0bff617 	ldw	r2,-40(fp)
 200246c:	1885883a 	add	r2,r3,r2
 2002470:	10c00044 	addi	r3,r2,1
 2002474:	e0bffc17 	ldw	r2,-16(fp)
 2002478:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200247c:	e0bffc17 	ldw	r2,-16(fp)
 2002480:	10c00217 	ldw	r3,8(r2)
 2002484:	e0bff617 	ldw	r2,-40(fp)
 2002488:	1880042e 	bgeu	r3,r2,200249c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 200248c:	e0bffc17 	ldw	r2,-16(fp)
 2002490:	00c00044 	movi	r3,1
 2002494:	10c00405 	stb	r3,16(r2)
 2002498:	00000206 	br	20024a4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 200249c:	e0bffc17 	ldw	r2,-16(fp)
 20024a0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 20024a4:	e0bffc17 	ldw	r2,-16(fp)
 20024a8:	00c08034 	movhi	r3,512
 20024ac:	18d40e04 	addi	r3,r3,20536
 20024b0:	e0fff915 	stw	r3,-28(fp)
 20024b4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20024b8:	e0bffa17 	ldw	r2,-24(fp)
 20024bc:	e0fff917 	ldw	r3,-28(fp)
 20024c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20024c4:	e0bff917 	ldw	r2,-28(fp)
 20024c8:	10c00017 	ldw	r3,0(r2)
 20024cc:	e0bffa17 	ldw	r2,-24(fp)
 20024d0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20024d4:	e0bff917 	ldw	r2,-28(fp)
 20024d8:	10800017 	ldw	r2,0(r2)
 20024dc:	e0fffa17 	ldw	r3,-24(fp)
 20024e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20024e4:	e0bff917 	ldw	r2,-28(fp)
 20024e8:	e0fffa17 	ldw	r3,-24(fp)
 20024ec:	10c00015 	stw	r3,0(r2)
 20024f0:	e0bff717 	ldw	r2,-36(fp)
 20024f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20024f8:	e0bffb17 	ldw	r2,-20(fp)
 20024fc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2002500:	0005883a 	mov	r2,zero
 2002504:	00000306 	br	2002514 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 2002508:	00bffa84 	movi	r2,-22
 200250c:	00000106 	br	2002514 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 2002510:	00bfde84 	movi	r2,-134
  }
}
 2002514:	e037883a 	mov	sp,fp
 2002518:	df000017 	ldw	fp,0(sp)
 200251c:	dec00104 	addi	sp,sp,4
 2002520:	f800283a 	ret

02002524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002524:	defffe04 	addi	sp,sp,-8
 2002528:	dfc00115 	stw	ra,4(sp)
 200252c:	df000015 	stw	fp,0(sp)
 2002530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002534:	00808034 	movhi	r2,512
 2002538:	10940b04 	addi	r2,r2,20524
 200253c:	10800017 	ldw	r2,0(r2)
 2002540:	10000526 	beq	r2,zero,2002558 <alt_get_errno+0x34>
 2002544:	00808034 	movhi	r2,512
 2002548:	10940b04 	addi	r2,r2,20524
 200254c:	10800017 	ldw	r2,0(r2)
 2002550:	103ee83a 	callr	r2
 2002554:	00000206 	br	2002560 <alt_get_errno+0x3c>
 2002558:	00808034 	movhi	r2,512
 200255c:	10941d04 	addi	r2,r2,20596
}
 2002560:	e037883a 	mov	sp,fp
 2002564:	dfc00117 	ldw	ra,4(sp)
 2002568:	df000017 	ldw	fp,0(sp)
 200256c:	dec00204 	addi	sp,sp,8
 2002570:	f800283a 	ret

02002574 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002574:	defffb04 	addi	sp,sp,-20
 2002578:	dfc00415 	stw	ra,16(sp)
 200257c:	df000315 	stw	fp,12(sp)
 2002580:	df000304 	addi	fp,sp,12
 2002584:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002588:	e0bfff17 	ldw	r2,-4(fp)
 200258c:	10000616 	blt	r2,zero,20025a8 <close+0x34>
 2002590:	e0bfff17 	ldw	r2,-4(fp)
 2002594:	10c00324 	muli	r3,r2,12
 2002598:	00808034 	movhi	r2,512
 200259c:	10929c04 	addi	r2,r2,19056
 20025a0:	1885883a 	add	r2,r3,r2
 20025a4:	00000106 	br	20025ac <close+0x38>
 20025a8:	0005883a 	mov	r2,zero
 20025ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 20025b0:	e0bffd17 	ldw	r2,-12(fp)
 20025b4:	10001826 	beq	r2,zero,2002618 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 20025b8:	e0bffd17 	ldw	r2,-12(fp)
 20025bc:	10800017 	ldw	r2,0(r2)
 20025c0:	10800417 	ldw	r2,16(r2)
 20025c4:	10000626 	beq	r2,zero,20025e0 <close+0x6c>
 20025c8:	e0bffd17 	ldw	r2,-12(fp)
 20025cc:	10800017 	ldw	r2,0(r2)
 20025d0:	10800417 	ldw	r2,16(r2)
 20025d4:	e13ffd17 	ldw	r4,-12(fp)
 20025d8:	103ee83a 	callr	r2
 20025dc:	00000106 	br	20025e4 <close+0x70>
 20025e0:	0005883a 	mov	r2,zero
 20025e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20025e8:	e13fff17 	ldw	r4,-4(fp)
 20025ec:	2002d100 	call	2002d10 <alt_release_fd>
    if (rval < 0)
 20025f0:	e0bffe17 	ldw	r2,-8(fp)
 20025f4:	1000060e 	bge	r2,zero,2002610 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 20025f8:	20025240 	call	2002524 <alt_get_errno>
 20025fc:	e0fffe17 	ldw	r3,-8(fp)
 2002600:	00c7c83a 	sub	r3,zero,r3
 2002604:	10c00015 	stw	r3,0(r2)
      return -1;
 2002608:	00bfffc4 	movi	r2,-1
 200260c:	00000606 	br	2002628 <close+0xb4>
    }
    return 0;
 2002610:	0005883a 	mov	r2,zero
 2002614:	00000406 	br	2002628 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002618:	20025240 	call	2002524 <alt_get_errno>
 200261c:	00c01444 	movi	r3,81
 2002620:	10c00015 	stw	r3,0(r2)
    return -1;
 2002624:	00bfffc4 	movi	r2,-1
  }
}
 2002628:	e037883a 	mov	sp,fp
 200262c:	dfc00117 	ldw	ra,4(sp)
 2002630:	df000017 	ldw	fp,0(sp)
 2002634:	dec00204 	addi	sp,sp,8
 2002638:	f800283a 	ret

0200263c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200263c:	defffc04 	addi	sp,sp,-16
 2002640:	df000315 	stw	fp,12(sp)
 2002644:	df000304 	addi	fp,sp,12
 2002648:	e13ffd15 	stw	r4,-12(fp)
 200264c:	e17ffe15 	stw	r5,-8(fp)
 2002650:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002654:	e0bfff17 	ldw	r2,-4(fp)
}
 2002658:	e037883a 	mov	sp,fp
 200265c:	df000017 	ldw	fp,0(sp)
 2002660:	dec00104 	addi	sp,sp,4
 2002664:	f800283a 	ret

02002668 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002668:	defffe04 	addi	sp,sp,-8
 200266c:	dfc00115 	stw	ra,4(sp)
 2002670:	df000015 	stw	fp,0(sp)
 2002674:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002678:	00808034 	movhi	r2,512
 200267c:	10940b04 	addi	r2,r2,20524
 2002680:	10800017 	ldw	r2,0(r2)
 2002684:	10000526 	beq	r2,zero,200269c <alt_get_errno+0x34>
 2002688:	00808034 	movhi	r2,512
 200268c:	10940b04 	addi	r2,r2,20524
 2002690:	10800017 	ldw	r2,0(r2)
 2002694:	103ee83a 	callr	r2
 2002698:	00000206 	br	20026a4 <alt_get_errno+0x3c>
 200269c:	00808034 	movhi	r2,512
 20026a0:	10941d04 	addi	r2,r2,20596
}
 20026a4:	e037883a 	mov	sp,fp
 20026a8:	dfc00117 	ldw	ra,4(sp)
 20026ac:	df000017 	ldw	fp,0(sp)
 20026b0:	dec00204 	addi	sp,sp,8
 20026b4:	f800283a 	ret

020026b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 20026b8:	defffa04 	addi	sp,sp,-24
 20026bc:	dfc00515 	stw	ra,20(sp)
 20026c0:	df000415 	stw	fp,16(sp)
 20026c4:	df000404 	addi	fp,sp,16
 20026c8:	e13ffe15 	stw	r4,-8(fp)
 20026cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 20026d0:	e0bffe17 	ldw	r2,-8(fp)
 20026d4:	10000326 	beq	r2,zero,20026e4 <alt_dev_llist_insert+0x2c>
 20026d8:	e0bffe17 	ldw	r2,-8(fp)
 20026dc:	10800217 	ldw	r2,8(r2)
 20026e0:	1000051e 	bne	r2,zero,20026f8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 20026e4:	20026680 	call	2002668 <alt_get_errno>
 20026e8:	00c00584 	movi	r3,22
 20026ec:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 20026f0:	00bffa84 	movi	r2,-22
 20026f4:	00001306 	br	2002744 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20026f8:	e0bffe17 	ldw	r2,-8(fp)
 20026fc:	e0ffff17 	ldw	r3,-4(fp)
 2002700:	e0fffc15 	stw	r3,-16(fp)
 2002704:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2002708:	e0bffd17 	ldw	r2,-12(fp)
 200270c:	e0fffc17 	ldw	r3,-16(fp)
 2002710:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2002714:	e0bffc17 	ldw	r2,-16(fp)
 2002718:	10c00017 	ldw	r3,0(r2)
 200271c:	e0bffd17 	ldw	r2,-12(fp)
 2002720:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2002724:	e0bffc17 	ldw	r2,-16(fp)
 2002728:	10800017 	ldw	r2,0(r2)
 200272c:	e0fffd17 	ldw	r3,-12(fp)
 2002730:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2002734:	e0bffc17 	ldw	r2,-16(fp)
 2002738:	e0fffd17 	ldw	r3,-12(fp)
 200273c:	10c00015 	stw	r3,0(r2)

  return 0;  
 2002740:	0005883a 	mov	r2,zero
}
 2002744:	e037883a 	mov	sp,fp
 2002748:	dfc00117 	ldw	ra,4(sp)
 200274c:	df000017 	ldw	fp,0(sp)
 2002750:	dec00204 	addi	sp,sp,8
 2002754:	f800283a 	ret

02002758 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2002758:	defffd04 	addi	sp,sp,-12
 200275c:	dfc00215 	stw	ra,8(sp)
 2002760:	df000115 	stw	fp,4(sp)
 2002764:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2002768:	00808034 	movhi	r2,512
 200276c:	108e3404 	addi	r2,r2,14544
 2002770:	e0bfff15 	stw	r2,-4(fp)
 2002774:	00000606 	br	2002790 <_do_ctors+0x38>
        (*ctor) (); 
 2002778:	e0bfff17 	ldw	r2,-4(fp)
 200277c:	10800017 	ldw	r2,0(r2)
 2002780:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2002784:	e0bfff17 	ldw	r2,-4(fp)
 2002788:	10bfff04 	addi	r2,r2,-4
 200278c:	e0bfff15 	stw	r2,-4(fp)
 2002790:	e0ffff17 	ldw	r3,-4(fp)
 2002794:	00808034 	movhi	r2,512
 2002798:	108e3504 	addi	r2,r2,14548
 200279c:	18bff62e 	bgeu	r3,r2,2002778 <__reset+0xfe001778>
        (*ctor) (); 
}
 20027a0:	e037883a 	mov	sp,fp
 20027a4:	dfc00117 	ldw	ra,4(sp)
 20027a8:	df000017 	ldw	fp,0(sp)
 20027ac:	dec00204 	addi	sp,sp,8
 20027b0:	f800283a 	ret

020027b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20027b4:	defffd04 	addi	sp,sp,-12
 20027b8:	dfc00215 	stw	ra,8(sp)
 20027bc:	df000115 	stw	fp,4(sp)
 20027c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20027c4:	00808034 	movhi	r2,512
 20027c8:	108e3404 	addi	r2,r2,14544
 20027cc:	e0bfff15 	stw	r2,-4(fp)
 20027d0:	00000606 	br	20027ec <_do_dtors+0x38>
        (*dtor) (); 
 20027d4:	e0bfff17 	ldw	r2,-4(fp)
 20027d8:	10800017 	ldw	r2,0(r2)
 20027dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20027e0:	e0bfff17 	ldw	r2,-4(fp)
 20027e4:	10bfff04 	addi	r2,r2,-4
 20027e8:	e0bfff15 	stw	r2,-4(fp)
 20027ec:	e0ffff17 	ldw	r3,-4(fp)
 20027f0:	00808034 	movhi	r2,512
 20027f4:	108e3504 	addi	r2,r2,14548
 20027f8:	18bff62e 	bgeu	r3,r2,20027d4 <__reset+0xfe0017d4>
        (*dtor) (); 
}
 20027fc:	e037883a 	mov	sp,fp
 2002800:	dfc00117 	ldw	ra,4(sp)
 2002804:	df000017 	ldw	fp,0(sp)
 2002808:	dec00204 	addi	sp,sp,8
 200280c:	f800283a 	ret

02002810 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2002810:	defffc04 	addi	sp,sp,-16
 2002814:	dfc00315 	stw	ra,12(sp)
 2002818:	df000215 	stw	fp,8(sp)
 200281c:	df000204 	addi	fp,sp,8
 2002820:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2002824:	e13fff17 	ldw	r4,-4(fp)
 2002828:	d1600704 	addi	r5,gp,-32740
 200282c:	20031280 	call	2003128 <alt_find_dev>
 2002830:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2002834:	e0bffe17 	ldw	r2,-8(fp)
 2002838:	10000926 	beq	r2,zero,2002860 <alt_flash_open_dev+0x50>
 200283c:	e0bffe17 	ldw	r2,-8(fp)
 2002840:	10800317 	ldw	r2,12(r2)
 2002844:	10000626 	beq	r2,zero,2002860 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2002848:	e0bffe17 	ldw	r2,-8(fp)
 200284c:	10800317 	ldw	r2,12(r2)
 2002850:	e13ffe17 	ldw	r4,-8(fp)
 2002854:	e17fff17 	ldw	r5,-4(fp)
 2002858:	103ee83a 	callr	r2
 200285c:	00000106 	br	2002864 <alt_flash_open_dev+0x54>
  }

  return dev;
 2002860:	e0bffe17 	ldw	r2,-8(fp)
}
 2002864:	e037883a 	mov	sp,fp
 2002868:	dfc00117 	ldw	ra,4(sp)
 200286c:	df000017 	ldw	fp,0(sp)
 2002870:	dec00204 	addi	sp,sp,8
 2002874:	f800283a 	ret

02002878 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2002878:	defffd04 	addi	sp,sp,-12
 200287c:	dfc00215 	stw	ra,8(sp)
 2002880:	df000115 	stw	fp,4(sp)
 2002884:	df000104 	addi	fp,sp,4
 2002888:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200288c:	e0bfff17 	ldw	r2,-4(fp)
 2002890:	10000726 	beq	r2,zero,20028b0 <alt_flash_close_dev+0x38>
 2002894:	e0bfff17 	ldw	r2,-4(fp)
 2002898:	10800417 	ldw	r2,16(r2)
 200289c:	10000426 	beq	r2,zero,20028b0 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 20028a0:	e0bfff17 	ldw	r2,-4(fp)
 20028a4:	10800417 	ldw	r2,16(r2)
 20028a8:	e13fff17 	ldw	r4,-4(fp)
 20028ac:	103ee83a 	callr	r2
  }
  return;
 20028b0:	0001883a 	nop
}
 20028b4:	e037883a 	mov	sp,fp
 20028b8:	dfc00117 	ldw	ra,4(sp)
 20028bc:	df000017 	ldw	fp,0(sp)
 20028c0:	dec00204 	addi	sp,sp,8
 20028c4:	f800283a 	ret

020028c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 20028c8:	defffe04 	addi	sp,sp,-8
 20028cc:	df000115 	stw	fp,4(sp)
 20028d0:	df000104 	addi	fp,sp,4
 20028d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 20028d8:	e0bfff17 	ldw	r2,-4(fp)
 20028dc:	10bffe84 	addi	r2,r2,-6
 20028e0:	10c00428 	cmpgeui	r3,r2,16
 20028e4:	18001b1e 	bne	r3,zero,2002954 <alt_exception_cause_generated_bad_addr+0x8c>
 20028e8:	1085883a 	add	r2,r2,r2
 20028ec:	1087883a 	add	r3,r2,r2
 20028f0:	00808034 	movhi	r2,512
 20028f4:	108a4104 	addi	r2,r2,10500
 20028f8:	1885883a 	add	r2,r3,r2
 20028fc:	10800017 	ldw	r2,0(r2)
 2002900:	1000683a 	jmp	r2
 2002904:	02002944 	movi	r8,165
 2002908:	02002944 	movi	r8,165
 200290c:	02002954 	movui	r8,165
 2002910:	02002954 	movui	r8,165
 2002914:	02002954 	movui	r8,165
 2002918:	02002944 	movi	r8,165
 200291c:	0200294c 	andi	r8,zero,165
 2002920:	02002954 	movui	r8,165
 2002924:	02002944 	movi	r8,165
 2002928:	02002944 	movi	r8,165
 200292c:	02002954 	movui	r8,165
 2002930:	02002944 	movi	r8,165
 2002934:	0200294c 	andi	r8,zero,165
 2002938:	02002954 	movui	r8,165
 200293c:	02002954 	movui	r8,165
 2002940:	02002944 	movi	r8,165
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2002944:	00800044 	movi	r2,1
 2002948:	00000306 	br	2002958 <alt_exception_cause_generated_bad_addr+0x90>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 200294c:	0005883a 	mov	r2,zero
 2002950:	00000106 	br	2002958 <alt_exception_cause_generated_bad_addr+0x90>

  default:
    return 0;
 2002954:	0005883a 	mov	r2,zero
  }
}
 2002958:	e037883a 	mov	sp,fp
 200295c:	df000017 	ldw	fp,0(sp)
 2002960:	dec00104 	addi	sp,sp,4
 2002964:	f800283a 	ret

02002968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2002968:	defff904 	addi	sp,sp,-28
 200296c:	dfc00615 	stw	ra,24(sp)
 2002970:	df000515 	stw	fp,20(sp)
 2002974:	df000504 	addi	fp,sp,20
 2002978:	e13ffc15 	stw	r4,-16(fp)
 200297c:	e17ffd15 	stw	r5,-12(fp)
 2002980:	e1bffe15 	stw	r6,-8(fp)
 2002984:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2002988:	e13ffd17 	ldw	r4,-12(fp)
 200298c:	e17ffe17 	ldw	r5,-8(fp)
 2002990:	e1bfff17 	ldw	r6,-4(fp)
 2002994:	2002bbc0 	call	2002bbc <open>
 2002998:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200299c:	e0bffb17 	ldw	r2,-20(fp)
 20029a0:	10001c16 	blt	r2,zero,2002a14 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 20029a4:	00c08034 	movhi	r3,512
 20029a8:	18d29c04 	addi	r3,r3,19056
 20029ac:	e0bffb17 	ldw	r2,-20(fp)
 20029b0:	10800324 	muli	r2,r2,12
 20029b4:	1885883a 	add	r2,r3,r2
 20029b8:	10c00017 	ldw	r3,0(r2)
 20029bc:	e0bffc17 	ldw	r2,-16(fp)
 20029c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20029c4:	00c08034 	movhi	r3,512
 20029c8:	18d29c04 	addi	r3,r3,19056
 20029cc:	e0bffb17 	ldw	r2,-20(fp)
 20029d0:	10800324 	muli	r2,r2,12
 20029d4:	1885883a 	add	r2,r3,r2
 20029d8:	10800104 	addi	r2,r2,4
 20029dc:	10c00017 	ldw	r3,0(r2)
 20029e0:	e0bffc17 	ldw	r2,-16(fp)
 20029e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20029e8:	00c08034 	movhi	r3,512
 20029ec:	18d29c04 	addi	r3,r3,19056
 20029f0:	e0bffb17 	ldw	r2,-20(fp)
 20029f4:	10800324 	muli	r2,r2,12
 20029f8:	1885883a 	add	r2,r3,r2
 20029fc:	10800204 	addi	r2,r2,8
 2002a00:	10c00017 	ldw	r3,0(r2)
 2002a04:	e0bffc17 	ldw	r2,-16(fp)
 2002a08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2002a0c:	e13ffb17 	ldw	r4,-20(fp)
 2002a10:	2002d100 	call	2002d10 <alt_release_fd>
  }
} 
 2002a14:	e037883a 	mov	sp,fp
 2002a18:	dfc00117 	ldw	ra,4(sp)
 2002a1c:	df000017 	ldw	fp,0(sp)
 2002a20:	dec00204 	addi	sp,sp,8
 2002a24:	f800283a 	ret

02002a28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2002a28:	defffb04 	addi	sp,sp,-20
 2002a2c:	dfc00415 	stw	ra,16(sp)
 2002a30:	df000315 	stw	fp,12(sp)
 2002a34:	df000304 	addi	fp,sp,12
 2002a38:	e13ffd15 	stw	r4,-12(fp)
 2002a3c:	e17ffe15 	stw	r5,-8(fp)
 2002a40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2002a44:	01008034 	movhi	r4,512
 2002a48:	21129f04 	addi	r4,r4,19068
 2002a4c:	e17ffd17 	ldw	r5,-12(fp)
 2002a50:	01800044 	movi	r6,1
 2002a54:	01c07fc4 	movi	r7,511
 2002a58:	20029680 	call	2002968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2002a5c:	01008034 	movhi	r4,512
 2002a60:	21129c04 	addi	r4,r4,19056
 2002a64:	e17ffe17 	ldw	r5,-8(fp)
 2002a68:	000d883a 	mov	r6,zero
 2002a6c:	01c07fc4 	movi	r7,511
 2002a70:	20029680 	call	2002968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2002a74:	01008034 	movhi	r4,512
 2002a78:	2112a204 	addi	r4,r4,19080
 2002a7c:	e17fff17 	ldw	r5,-4(fp)
 2002a80:	01800044 	movi	r6,1
 2002a84:	01c07fc4 	movi	r7,511
 2002a88:	20029680 	call	2002968 <alt_open_fd>
}  
 2002a8c:	e037883a 	mov	sp,fp
 2002a90:	dfc00117 	ldw	ra,4(sp)
 2002a94:	df000017 	ldw	fp,0(sp)
 2002a98:	dec00204 	addi	sp,sp,8
 2002a9c:	f800283a 	ret

02002aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002aa0:	defffe04 	addi	sp,sp,-8
 2002aa4:	dfc00115 	stw	ra,4(sp)
 2002aa8:	df000015 	stw	fp,0(sp)
 2002aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002ab0:	00808034 	movhi	r2,512
 2002ab4:	10940b04 	addi	r2,r2,20524
 2002ab8:	10800017 	ldw	r2,0(r2)
 2002abc:	10000526 	beq	r2,zero,2002ad4 <alt_get_errno+0x34>
 2002ac0:	00808034 	movhi	r2,512
 2002ac4:	10940b04 	addi	r2,r2,20524
 2002ac8:	10800017 	ldw	r2,0(r2)
 2002acc:	103ee83a 	callr	r2
 2002ad0:	00000206 	br	2002adc <alt_get_errno+0x3c>
 2002ad4:	00808034 	movhi	r2,512
 2002ad8:	10941d04 	addi	r2,r2,20596
}
 2002adc:	e037883a 	mov	sp,fp
 2002ae0:	dfc00117 	ldw	ra,4(sp)
 2002ae4:	df000017 	ldw	fp,0(sp)
 2002ae8:	dec00204 	addi	sp,sp,8
 2002aec:	f800283a 	ret

02002af0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2002af0:	defffd04 	addi	sp,sp,-12
 2002af4:	df000215 	stw	fp,8(sp)
 2002af8:	df000204 	addi	fp,sp,8
 2002afc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2002b00:	e0bfff17 	ldw	r2,-4(fp)
 2002b04:	10800217 	ldw	r2,8(r2)
 2002b08:	10d00034 	orhi	r3,r2,16384
 2002b0c:	e0bfff17 	ldw	r2,-4(fp)
 2002b10:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2002b14:	e03ffe15 	stw	zero,-8(fp)
 2002b18:	00001d06 	br	2002b90 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2002b1c:	00c08034 	movhi	r3,512
 2002b20:	18d29c04 	addi	r3,r3,19056
 2002b24:	e0bffe17 	ldw	r2,-8(fp)
 2002b28:	10800324 	muli	r2,r2,12
 2002b2c:	1885883a 	add	r2,r3,r2
 2002b30:	10c00017 	ldw	r3,0(r2)
 2002b34:	e0bfff17 	ldw	r2,-4(fp)
 2002b38:	10800017 	ldw	r2,0(r2)
 2002b3c:	1880111e 	bne	r3,r2,2002b84 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2002b40:	00c08034 	movhi	r3,512
 2002b44:	18d29c04 	addi	r3,r3,19056
 2002b48:	e0bffe17 	ldw	r2,-8(fp)
 2002b4c:	10800324 	muli	r2,r2,12
 2002b50:	1885883a 	add	r2,r3,r2
 2002b54:	10800204 	addi	r2,r2,8
 2002b58:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2002b5c:	1000090e 	bge	r2,zero,2002b84 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2002b60:	e0bffe17 	ldw	r2,-8(fp)
 2002b64:	10c00324 	muli	r3,r2,12
 2002b68:	00808034 	movhi	r2,512
 2002b6c:	10929c04 	addi	r2,r2,19056
 2002b70:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2002b74:	e0bfff17 	ldw	r2,-4(fp)
 2002b78:	18800226 	beq	r3,r2,2002b84 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2002b7c:	00bffcc4 	movi	r2,-13
 2002b80:	00000a06 	br	2002bac <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2002b84:	e0bffe17 	ldw	r2,-8(fp)
 2002b88:	10800044 	addi	r2,r2,1
 2002b8c:	e0bffe15 	stw	r2,-8(fp)
 2002b90:	00808034 	movhi	r2,512
 2002b94:	10940a04 	addi	r2,r2,20520
 2002b98:	10800017 	ldw	r2,0(r2)
 2002b9c:	1007883a 	mov	r3,r2
 2002ba0:	e0bffe17 	ldw	r2,-8(fp)
 2002ba4:	18bfdd2e 	bgeu	r3,r2,2002b1c <__reset+0xfe001b1c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2002ba8:	0005883a 	mov	r2,zero
}
 2002bac:	e037883a 	mov	sp,fp
 2002bb0:	df000017 	ldw	fp,0(sp)
 2002bb4:	dec00104 	addi	sp,sp,4
 2002bb8:	f800283a 	ret

02002bbc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2002bbc:	defff604 	addi	sp,sp,-40
 2002bc0:	dfc00915 	stw	ra,36(sp)
 2002bc4:	df000815 	stw	fp,32(sp)
 2002bc8:	df000804 	addi	fp,sp,32
 2002bcc:	e13ffd15 	stw	r4,-12(fp)
 2002bd0:	e17ffe15 	stw	r5,-8(fp)
 2002bd4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2002bd8:	00bfffc4 	movi	r2,-1
 2002bdc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2002be0:	00bffb44 	movi	r2,-19
 2002be4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2002be8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2002bec:	e13ffd17 	ldw	r4,-12(fp)
 2002bf0:	01408034 	movhi	r5,512
 2002bf4:	29540804 	addi	r5,r5,20512
 2002bf8:	20031280 	call	2003128 <alt_find_dev>
 2002bfc:	e0bff815 	stw	r2,-32(fp)
 2002c00:	e0bff817 	ldw	r2,-32(fp)
 2002c04:	1000051e 	bne	r2,zero,2002c1c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2002c08:	e13ffd17 	ldw	r4,-12(fp)
 2002c0c:	20031b80 	call	20031b8 <alt_find_file>
 2002c10:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2002c14:	00800044 	movi	r2,1
 2002c18:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2002c1c:	e0bff817 	ldw	r2,-32(fp)
 2002c20:	10002926 	beq	r2,zero,2002cc8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2002c24:	e13ff817 	ldw	r4,-32(fp)
 2002c28:	20032cc0 	call	20032cc <alt_get_fd>
 2002c2c:	e0bff915 	stw	r2,-28(fp)
 2002c30:	e0bff917 	ldw	r2,-28(fp)
 2002c34:	1000030e 	bge	r2,zero,2002c44 <open+0x88>
    {
      status = index;
 2002c38:	e0bff917 	ldw	r2,-28(fp)
 2002c3c:	e0bffa15 	stw	r2,-24(fp)
 2002c40:	00002306 	br	2002cd0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 2002c44:	e0bff917 	ldw	r2,-28(fp)
 2002c48:	10c00324 	muli	r3,r2,12
 2002c4c:	00808034 	movhi	r2,512
 2002c50:	10929c04 	addi	r2,r2,19056
 2002c54:	1885883a 	add	r2,r3,r2
 2002c58:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2002c5c:	e0fffe17 	ldw	r3,-8(fp)
 2002c60:	00900034 	movhi	r2,16384
 2002c64:	10bfffc4 	addi	r2,r2,-1
 2002c68:	1886703a 	and	r3,r3,r2
 2002c6c:	e0bffc17 	ldw	r2,-16(fp)
 2002c70:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2002c74:	e0bffb17 	ldw	r2,-20(fp)
 2002c78:	1000051e 	bne	r2,zero,2002c90 <open+0xd4>
 2002c7c:	e13ffc17 	ldw	r4,-16(fp)
 2002c80:	2002af00 	call	2002af0 <alt_file_locked>
 2002c84:	e0bffa15 	stw	r2,-24(fp)
 2002c88:	e0bffa17 	ldw	r2,-24(fp)
 2002c8c:	10001016 	blt	r2,zero,2002cd0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2002c90:	e0bff817 	ldw	r2,-32(fp)
 2002c94:	10800317 	ldw	r2,12(r2)
 2002c98:	10000826 	beq	r2,zero,2002cbc <open+0x100>
 2002c9c:	e0bff817 	ldw	r2,-32(fp)
 2002ca0:	10800317 	ldw	r2,12(r2)
 2002ca4:	e13ffc17 	ldw	r4,-16(fp)
 2002ca8:	e17ffd17 	ldw	r5,-12(fp)
 2002cac:	e1bffe17 	ldw	r6,-8(fp)
 2002cb0:	e1ffff17 	ldw	r7,-4(fp)
 2002cb4:	103ee83a 	callr	r2
 2002cb8:	00000106 	br	2002cc0 <open+0x104>
 2002cbc:	0005883a 	mov	r2,zero
 2002cc0:	e0bffa15 	stw	r2,-24(fp)
 2002cc4:	00000206 	br	2002cd0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2002cc8:	00bffb44 	movi	r2,-19
 2002ccc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2002cd0:	e0bffa17 	ldw	r2,-24(fp)
 2002cd4:	1000080e 	bge	r2,zero,2002cf8 <open+0x13c>
  {
    alt_release_fd (index);  
 2002cd8:	e13ff917 	ldw	r4,-28(fp)
 2002cdc:	2002d100 	call	2002d10 <alt_release_fd>
    ALT_ERRNO = -status;
 2002ce0:	2002aa00 	call	2002aa0 <alt_get_errno>
 2002ce4:	e0fffa17 	ldw	r3,-24(fp)
 2002ce8:	00c7c83a 	sub	r3,zero,r3
 2002cec:	10c00015 	stw	r3,0(r2)
    return -1;
 2002cf0:	00bfffc4 	movi	r2,-1
 2002cf4:	00000106 	br	2002cfc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2002cf8:	e0bff917 	ldw	r2,-28(fp)
}
 2002cfc:	e037883a 	mov	sp,fp
 2002d00:	dfc00117 	ldw	ra,4(sp)
 2002d04:	df000017 	ldw	fp,0(sp)
 2002d08:	dec00204 	addi	sp,sp,8
 2002d0c:	f800283a 	ret

02002d10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2002d10:	defffe04 	addi	sp,sp,-8
 2002d14:	df000115 	stw	fp,4(sp)
 2002d18:	df000104 	addi	fp,sp,4
 2002d1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2002d20:	e0bfff17 	ldw	r2,-4(fp)
 2002d24:	108000d0 	cmplti	r2,r2,3
 2002d28:	10000d1e 	bne	r2,zero,2002d60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 2002d2c:	00c08034 	movhi	r3,512
 2002d30:	18d29c04 	addi	r3,r3,19056
 2002d34:	e0bfff17 	ldw	r2,-4(fp)
 2002d38:	10800324 	muli	r2,r2,12
 2002d3c:	1885883a 	add	r2,r3,r2
 2002d40:	10800204 	addi	r2,r2,8
 2002d44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2002d48:	00c08034 	movhi	r3,512
 2002d4c:	18d29c04 	addi	r3,r3,19056
 2002d50:	e0bfff17 	ldw	r2,-4(fp)
 2002d54:	10800324 	muli	r2,r2,12
 2002d58:	1885883a 	add	r2,r3,r2
 2002d5c:	10000015 	stw	zero,0(r2)
  }
}
 2002d60:	e037883a 	mov	sp,fp
 2002d64:	df000017 	ldw	fp,0(sp)
 2002d68:	dec00104 	addi	sp,sp,4
 2002d6c:	f800283a 	ret

02002d70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2002d70:	defffa04 	addi	sp,sp,-24
 2002d74:	df000515 	stw	fp,20(sp)
 2002d78:	df000504 	addi	fp,sp,20
 2002d7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2002d80:	0005303a 	rdctl	r2,status
 2002d84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2002d88:	e0fffc17 	ldw	r3,-16(fp)
 2002d8c:	00bfff84 	movi	r2,-2
 2002d90:	1884703a 	and	r2,r3,r2
 2002d94:	1001703a 	wrctl	status,r2
  
  return context;
 2002d98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2002d9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2002da0:	e0bfff17 	ldw	r2,-4(fp)
 2002da4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2002da8:	e0bffd17 	ldw	r2,-12(fp)
 2002dac:	10800017 	ldw	r2,0(r2)
 2002db0:	e0fffd17 	ldw	r3,-12(fp)
 2002db4:	18c00117 	ldw	r3,4(r3)
 2002db8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2002dbc:	e0bffd17 	ldw	r2,-12(fp)
 2002dc0:	10800117 	ldw	r2,4(r2)
 2002dc4:	e0fffd17 	ldw	r3,-12(fp)
 2002dc8:	18c00017 	ldw	r3,0(r3)
 2002dcc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2002dd0:	e0bffd17 	ldw	r2,-12(fp)
 2002dd4:	e0fffd17 	ldw	r3,-12(fp)
 2002dd8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2002ddc:	e0bffd17 	ldw	r2,-12(fp)
 2002de0:	e0fffd17 	ldw	r3,-12(fp)
 2002de4:	10c00015 	stw	r3,0(r2)
 2002de8:	e0bffb17 	ldw	r2,-20(fp)
 2002dec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2002df0:	e0bffe17 	ldw	r2,-8(fp)
 2002df4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2002df8:	e037883a 	mov	sp,fp
 2002dfc:	df000017 	ldw	fp,0(sp)
 2002e00:	dec00104 	addi	sp,sp,4
 2002e04:	f800283a 	ret

02002e08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2002e08:	defffb04 	addi	sp,sp,-20
 2002e0c:	dfc00415 	stw	ra,16(sp)
 2002e10:	df000315 	stw	fp,12(sp)
 2002e14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2002e18:	d0a00917 	ldw	r2,-32732(gp)
 2002e1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2002e20:	d0a01717 	ldw	r2,-32676(gp)
 2002e24:	10800044 	addi	r2,r2,1
 2002e28:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2002e2c:	00002e06 	br	2002ee8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2002e30:	e0bffd17 	ldw	r2,-12(fp)
 2002e34:	10800017 	ldw	r2,0(r2)
 2002e38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2002e3c:	e0bffd17 	ldw	r2,-12(fp)
 2002e40:	10800403 	ldbu	r2,16(r2)
 2002e44:	10803fcc 	andi	r2,r2,255
 2002e48:	10000426 	beq	r2,zero,2002e5c <alt_tick+0x54>
 2002e4c:	d0a01717 	ldw	r2,-32676(gp)
 2002e50:	1000021e 	bne	r2,zero,2002e5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2002e54:	e0bffd17 	ldw	r2,-12(fp)
 2002e58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2002e5c:	e0bffd17 	ldw	r2,-12(fp)
 2002e60:	10800217 	ldw	r2,8(r2)
 2002e64:	d0e01717 	ldw	r3,-32676(gp)
 2002e68:	18801d36 	bltu	r3,r2,2002ee0 <alt_tick+0xd8>
 2002e6c:	e0bffd17 	ldw	r2,-12(fp)
 2002e70:	10800403 	ldbu	r2,16(r2)
 2002e74:	10803fcc 	andi	r2,r2,255
 2002e78:	1000191e 	bne	r2,zero,2002ee0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2002e7c:	e0bffd17 	ldw	r2,-12(fp)
 2002e80:	10800317 	ldw	r2,12(r2)
 2002e84:	e0fffd17 	ldw	r3,-12(fp)
 2002e88:	18c00517 	ldw	r3,20(r3)
 2002e8c:	1809883a 	mov	r4,r3
 2002e90:	103ee83a 	callr	r2
 2002e94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2002e98:	e0bfff17 	ldw	r2,-4(fp)
 2002e9c:	1000031e 	bne	r2,zero,2002eac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2002ea0:	e13ffd17 	ldw	r4,-12(fp)
 2002ea4:	2002d700 	call	2002d70 <alt_alarm_stop>
 2002ea8:	00000d06 	br	2002ee0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2002eac:	e0bffd17 	ldw	r2,-12(fp)
 2002eb0:	10c00217 	ldw	r3,8(r2)
 2002eb4:	e0bfff17 	ldw	r2,-4(fp)
 2002eb8:	1887883a 	add	r3,r3,r2
 2002ebc:	e0bffd17 	ldw	r2,-12(fp)
 2002ec0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2002ec4:	e0bffd17 	ldw	r2,-12(fp)
 2002ec8:	10c00217 	ldw	r3,8(r2)
 2002ecc:	d0a01717 	ldw	r2,-32676(gp)
 2002ed0:	1880032e 	bgeu	r3,r2,2002ee0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2002ed4:	e0bffd17 	ldw	r2,-12(fp)
 2002ed8:	00c00044 	movi	r3,1
 2002edc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2002ee0:	e0bffe17 	ldw	r2,-8(fp)
 2002ee4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2002ee8:	e0fffd17 	ldw	r3,-12(fp)
 2002eec:	d0a00904 	addi	r2,gp,-32732
 2002ef0:	18bfcf1e 	bne	r3,r2,2002e30 <__reset+0xfe001e30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2002ef4:	0001883a 	nop
}
 2002ef8:	e037883a 	mov	sp,fp
 2002efc:	dfc00117 	ldw	ra,4(sp)
 2002f00:	df000017 	ldw	fp,0(sp)
 2002f04:	dec00204 	addi	sp,sp,8
 2002f08:	f800283a 	ret

02002f0c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2002f0c:	deffff04 	addi	sp,sp,-4
 2002f10:	df000015 	stw	fp,0(sp)
 2002f14:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2002f18:	000170fa 	wrctl	ienable,zero
}
 2002f1c:	e037883a 	mov	sp,fp
 2002f20:	df000017 	ldw	fp,0(sp)
 2002f24:	dec00104 	addi	sp,sp,4
 2002f28:	f800283a 	ret

02002f2c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2002f2c:	defff404 	addi	sp,sp,-48
 2002f30:	df000b15 	stw	fp,44(sp)
 2002f34:	df000b04 	addi	fp,sp,44
 2002f38:	e13ffc15 	stw	r4,-16(fp)
 2002f3c:	e17ffd15 	stw	r5,-12(fp)
 2002f40:	e1bffe15 	stw	r6,-8(fp)
 2002f44:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2002f48:	e0ffff17 	ldw	r3,-4(fp)
 2002f4c:	e0bffe17 	ldw	r2,-8(fp)
 2002f50:	1885883a 	add	r2,r3,r2
 2002f54:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2002f58:	e0c00217 	ldw	r3,8(fp)
 2002f5c:	e0800117 	ldw	r2,4(fp)
 2002f60:	1885883a 	add	r2,r3,r2
 2002f64:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2002f68:	e0800117 	ldw	r2,4(fp)
 2002f6c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2002f70:	e0bffe17 	ldw	r2,-8(fp)
 2002f74:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2002f78:	00800044 	movi	r2,1
 2002f7c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2002f80:	e0bffc17 	ldw	r2,-16(fp)
 2002f84:	10800504 	addi	r2,r2,20
 2002f88:	e0fffd17 	ldw	r3,-12(fp)
 2002f8c:	01000044 	movi	r4,1
 2002f90:	20c6983a 	sll	r3,r4,r3
 2002f94:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2002f98:	e0800317 	ldw	r2,12(fp)
 2002f9c:	1080008c 	andi	r2,r2,2
 2002fa0:	1000041e 	bne	r2,zero,2002fb4 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2002fa4:	e0bffc17 	ldw	r2,-16(fp)
 2002fa8:	10800304 	addi	r2,r2,12
 2002fac:	00c10004 	movi	r3,1024
 2002fb0:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2002fb4:	e0bffc17 	ldw	r2,-16(fp)
 2002fb8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2002fbc:	e0bffc17 	ldw	r2,-16(fp)
 2002fc0:	10800204 	addi	r2,r2,8
 2002fc4:	10800037 	ldwio	r2,0(r2)
 2002fc8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2002fcc:	e0bffa17 	ldw	r2,-24(fp)
 2002fd0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2002fd4:	10000226 	beq	r2,zero,2002fe0 <alt_avalon_spi_command+0xb4>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2002fd8:	e0bff717 	ldw	r2,-36(fp)
 2002fdc:	1000031e 	bne	r2,zero,2002fec <alt_avalon_spi_command+0xc0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2002fe0:	e0bffa17 	ldw	r2,-24(fp)
 2002fe4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2002fe8:	103ff426 	beq	r2,zero,2002fbc <__reset+0xfe001fbc>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2002fec:	e0bffa17 	ldw	r2,-24(fp)
 2002ff0:	1080100c 	andi	r2,r2,64
 2002ff4:	10001e26 	beq	r2,zero,2003070 <alt_avalon_spi_command+0x144>
 2002ff8:	e0bff717 	ldw	r2,-36(fp)
 2002ffc:	00801c0e 	bge	zero,r2,2003070 <alt_avalon_spi_command+0x144>
    {
      credits--;
 2003000:	e0bff717 	ldw	r2,-36(fp)
 2003004:	10bfffc4 	addi	r2,r2,-1
 2003008:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 200300c:	e0ffff17 	ldw	r3,-4(fp)
 2003010:	e0bff817 	ldw	r2,-32(fp)
 2003014:	18800a2e 	bgeu	r3,r2,2003040 <alt_avalon_spi_command+0x114>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2003018:	e0bffc17 	ldw	r2,-16(fp)
 200301c:	10800104 	addi	r2,r2,4
 2003020:	1007883a 	mov	r3,r2
 2003024:	e0bfff17 	ldw	r2,-4(fp)
 2003028:	11000044 	addi	r4,r2,1
 200302c:	e13fff15 	stw	r4,-4(fp)
 2003030:	10800003 	ldbu	r2,0(r2)
 2003034:	10803fcc 	andi	r2,r2,255
 2003038:	18800035 	stwio	r2,0(r3)
 200303c:	00000c06 	br	2003070 <alt_avalon_spi_command+0x144>
      else if (write_zeros > 0)
 2003040:	e0bff517 	ldw	r2,-44(fp)
 2003044:	10000826 	beq	r2,zero,2003068 <alt_avalon_spi_command+0x13c>
      {
        write_zeros--;
 2003048:	e0bff517 	ldw	r2,-44(fp)
 200304c:	10bfffc4 	addi	r2,r2,-1
 2003050:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2003054:	e0bffc17 	ldw	r2,-16(fp)
 2003058:	10800104 	addi	r2,r2,4
 200305c:	0007883a 	mov	r3,zero
 2003060:	10c00035 	stwio	r3,0(r2)
 2003064:	00000206 	br	2003070 <alt_avalon_spi_command+0x144>
      }
      else
        credits = -1024;
 2003068:	00bf0004 	movi	r2,-1024
 200306c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2003070:	e0bffa17 	ldw	r2,-24(fp)
 2003074:	1080200c 	andi	r2,r2,128
 2003078:	10001726 	beq	r2,zero,20030d8 <alt_avalon_spi_command+0x1ac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200307c:	e0bffc17 	ldw	r2,-16(fp)
 2003080:	10800037 	ldwio	r2,0(r2)
 2003084:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2003088:	e0bff617 	ldw	r2,-40(fp)
 200308c:	10000426 	beq	r2,zero,20030a0 <alt_avalon_spi_command+0x174>
        read_ignore--;
 2003090:	e0bff617 	ldw	r2,-40(fp)
 2003094:	10bfffc4 	addi	r2,r2,-1
 2003098:	e0bff615 	stw	r2,-40(fp)
 200309c:	00000506 	br	20030b4 <alt_avalon_spi_command+0x188>
      else
        *read_data++ = (alt_u8)rxdata;
 20030a0:	e0800217 	ldw	r2,8(fp)
 20030a4:	10c00044 	addi	r3,r2,1
 20030a8:	e0c00215 	stw	r3,8(fp)
 20030ac:	e0fffb17 	ldw	r3,-20(fp)
 20030b0:	10c00005 	stb	r3,0(r2)
      credits++;
 20030b4:	e0bff717 	ldw	r2,-36(fp)
 20030b8:	10800044 	addi	r2,r2,1
 20030bc:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 20030c0:	e0bff617 	ldw	r2,-40(fp)
 20030c4:	1000041e 	bne	r2,zero,20030d8 <alt_avalon_spi_command+0x1ac>
 20030c8:	e0c00217 	ldw	r3,8(fp)
 20030cc:	e0bff917 	ldw	r2,-28(fp)
 20030d0:	1880011e 	bne	r3,r2,20030d8 <alt_avalon_spi_command+0x1ac>
        break;
 20030d4:	00000106 	br	20030dc <alt_avalon_spi_command+0x1b0>
    }
    
  }
 20030d8:	003fb806 	br	2002fbc <__reset+0xfe001fbc>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 20030dc:	e0bffc17 	ldw	r2,-16(fp)
 20030e0:	10800204 	addi	r2,r2,8
 20030e4:	10800037 	ldwio	r2,0(r2)
 20030e8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 20030ec:	e0bffa17 	ldw	r2,-24(fp)
 20030f0:	1080080c 	andi	r2,r2,32
 20030f4:	103ff926 	beq	r2,zero,20030dc <__reset+0xfe0020dc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 20030f8:	e0800317 	ldw	r2,12(fp)
 20030fc:	1080004c 	andi	r2,r2,1
 2003100:	1000041e 	bne	r2,zero,2003114 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2003104:	e0bffc17 	ldw	r2,-16(fp)
 2003108:	10800304 	addi	r2,r2,12
 200310c:	0007883a 	mov	r3,zero
 2003110:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2003114:	e0800117 	ldw	r2,4(fp)
}
 2003118:	e037883a 	mov	sp,fp
 200311c:	df000017 	ldw	fp,0(sp)
 2003120:	dec00104 	addi	sp,sp,4
 2003124:	f800283a 	ret

02003128 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2003128:	defffa04 	addi	sp,sp,-24
 200312c:	dfc00515 	stw	ra,20(sp)
 2003130:	df000415 	stw	fp,16(sp)
 2003134:	df000404 	addi	fp,sp,16
 2003138:	e13ffe15 	stw	r4,-8(fp)
 200313c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2003140:	e0bfff17 	ldw	r2,-4(fp)
 2003144:	10800017 	ldw	r2,0(r2)
 2003148:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200314c:	e13ffe17 	ldw	r4,-8(fp)
 2003150:	20035540 	call	2003554 <strlen>
 2003154:	10800044 	addi	r2,r2,1
 2003158:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200315c:	00000d06 	br	2003194 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2003160:	e0bffc17 	ldw	r2,-16(fp)
 2003164:	10c00217 	ldw	r3,8(r2)
 2003168:	e0bffd17 	ldw	r2,-12(fp)
 200316c:	1809883a 	mov	r4,r3
 2003170:	e17ffe17 	ldw	r5,-8(fp)
 2003174:	100d883a 	mov	r6,r2
 2003178:	20033cc0 	call	20033cc <memcmp>
 200317c:	1000021e 	bne	r2,zero,2003188 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2003180:	e0bffc17 	ldw	r2,-16(fp)
 2003184:	00000706 	br	20031a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2003188:	e0bffc17 	ldw	r2,-16(fp)
 200318c:	10800017 	ldw	r2,0(r2)
 2003190:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2003194:	e0fffc17 	ldw	r3,-16(fp)
 2003198:	e0bfff17 	ldw	r2,-4(fp)
 200319c:	18bff01e 	bne	r3,r2,2003160 <__reset+0xfe002160>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20031a0:	0005883a 	mov	r2,zero
}
 20031a4:	e037883a 	mov	sp,fp
 20031a8:	dfc00117 	ldw	ra,4(sp)
 20031ac:	df000017 	ldw	fp,0(sp)
 20031b0:	dec00204 	addi	sp,sp,8
 20031b4:	f800283a 	ret

020031b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20031b8:	defffb04 	addi	sp,sp,-20
 20031bc:	dfc00415 	stw	ra,16(sp)
 20031c0:	df000315 	stw	fp,12(sp)
 20031c4:	df000304 	addi	fp,sp,12
 20031c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20031cc:	00808034 	movhi	r2,512
 20031d0:	10940604 	addi	r2,r2,20504
 20031d4:	10800017 	ldw	r2,0(r2)
 20031d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20031dc:	00003106 	br	20032a4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 20031e0:	e0bffd17 	ldw	r2,-12(fp)
 20031e4:	10800217 	ldw	r2,8(r2)
 20031e8:	1009883a 	mov	r4,r2
 20031ec:	20035540 	call	2003554 <strlen>
 20031f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20031f4:	e0bffd17 	ldw	r2,-12(fp)
 20031f8:	10c00217 	ldw	r3,8(r2)
 20031fc:	e0bffe17 	ldw	r2,-8(fp)
 2003200:	10bfffc4 	addi	r2,r2,-1
 2003204:	1885883a 	add	r2,r3,r2
 2003208:	10800003 	ldbu	r2,0(r2)
 200320c:	10803fcc 	andi	r2,r2,255
 2003210:	1080201c 	xori	r2,r2,128
 2003214:	10bfe004 	addi	r2,r2,-128
 2003218:	10800bd8 	cmpnei	r2,r2,47
 200321c:	1000031e 	bne	r2,zero,200322c <alt_find_file+0x74>
    {
      len -= 1;
 2003220:	e0bffe17 	ldw	r2,-8(fp)
 2003224:	10bfffc4 	addi	r2,r2,-1
 2003228:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200322c:	e0bffe17 	ldw	r2,-8(fp)
 2003230:	e0ffff17 	ldw	r3,-4(fp)
 2003234:	1885883a 	add	r2,r3,r2
 2003238:	10800003 	ldbu	r2,0(r2)
 200323c:	10803fcc 	andi	r2,r2,255
 2003240:	1080201c 	xori	r2,r2,128
 2003244:	10bfe004 	addi	r2,r2,-128
 2003248:	10800be0 	cmpeqi	r2,r2,47
 200324c:	1000081e 	bne	r2,zero,2003270 <alt_find_file+0xb8>
 2003250:	e0bffe17 	ldw	r2,-8(fp)
 2003254:	e0ffff17 	ldw	r3,-4(fp)
 2003258:	1885883a 	add	r2,r3,r2
 200325c:	10800003 	ldbu	r2,0(r2)
 2003260:	10803fcc 	andi	r2,r2,255
 2003264:	1080201c 	xori	r2,r2,128
 2003268:	10bfe004 	addi	r2,r2,-128
 200326c:	10000a1e 	bne	r2,zero,2003298 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 2003270:	e0bffd17 	ldw	r2,-12(fp)
 2003274:	10c00217 	ldw	r3,8(r2)
 2003278:	e0bffe17 	ldw	r2,-8(fp)
 200327c:	1809883a 	mov	r4,r3
 2003280:	e17fff17 	ldw	r5,-4(fp)
 2003284:	100d883a 	mov	r6,r2
 2003288:	20033cc0 	call	20033cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200328c:	1000021e 	bne	r2,zero,2003298 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2003290:	e0bffd17 	ldw	r2,-12(fp)
 2003294:	00000806 	br	20032b8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 2003298:	e0bffd17 	ldw	r2,-12(fp)
 200329c:	10800017 	ldw	r2,0(r2)
 20032a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20032a4:	e0fffd17 	ldw	r3,-12(fp)
 20032a8:	00808034 	movhi	r2,512
 20032ac:	10940604 	addi	r2,r2,20504
 20032b0:	18bfcb1e 	bne	r3,r2,20031e0 <__reset+0xfe0021e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20032b4:	0005883a 	mov	r2,zero
}
 20032b8:	e037883a 	mov	sp,fp
 20032bc:	dfc00117 	ldw	ra,4(sp)
 20032c0:	df000017 	ldw	fp,0(sp)
 20032c4:	dec00204 	addi	sp,sp,8
 20032c8:	f800283a 	ret

020032cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20032cc:	defffc04 	addi	sp,sp,-16
 20032d0:	df000315 	stw	fp,12(sp)
 20032d4:	df000304 	addi	fp,sp,12
 20032d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 20032dc:	00bffa04 	movi	r2,-24
 20032e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20032e4:	e03ffd15 	stw	zero,-12(fp)
 20032e8:	00001d06 	br	2003360 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 20032ec:	00c08034 	movhi	r3,512
 20032f0:	18d29c04 	addi	r3,r3,19056
 20032f4:	e0bffd17 	ldw	r2,-12(fp)
 20032f8:	10800324 	muli	r2,r2,12
 20032fc:	1885883a 	add	r2,r3,r2
 2003300:	10800017 	ldw	r2,0(r2)
 2003304:	1000131e 	bne	r2,zero,2003354 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 2003308:	00c08034 	movhi	r3,512
 200330c:	18d29c04 	addi	r3,r3,19056
 2003310:	e0bffd17 	ldw	r2,-12(fp)
 2003314:	10800324 	muli	r2,r2,12
 2003318:	1885883a 	add	r2,r3,r2
 200331c:	e0ffff17 	ldw	r3,-4(fp)
 2003320:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2003324:	00808034 	movhi	r2,512
 2003328:	10940a04 	addi	r2,r2,20520
 200332c:	10c00017 	ldw	r3,0(r2)
 2003330:	e0bffd17 	ldw	r2,-12(fp)
 2003334:	1880040e 	bge	r3,r2,2003348 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 2003338:	00808034 	movhi	r2,512
 200333c:	10940a04 	addi	r2,r2,20520
 2003340:	e0fffd17 	ldw	r3,-12(fp)
 2003344:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 2003348:	e0bffd17 	ldw	r2,-12(fp)
 200334c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 2003350:	00000606 	br	200336c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2003354:	e0bffd17 	ldw	r2,-12(fp)
 2003358:	10800044 	addi	r2,r2,1
 200335c:	e0bffd15 	stw	r2,-12(fp)
 2003360:	e0bffd17 	ldw	r2,-12(fp)
 2003364:	10800810 	cmplti	r2,r2,32
 2003368:	103fe01e 	bne	r2,zero,20032ec <__reset+0xfe0022ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200336c:	e0bffe17 	ldw	r2,-8(fp)
}
 2003370:	e037883a 	mov	sp,fp
 2003374:	df000017 	ldw	fp,0(sp)
 2003378:	dec00104 	addi	sp,sp,4
 200337c:	f800283a 	ret

02003380 <atexit>:
 2003380:	200b883a 	mov	r5,r4
 2003384:	000d883a 	mov	r6,zero
 2003388:	0009883a 	mov	r4,zero
 200338c:	000f883a 	mov	r7,zero
 2003390:	20035e01 	jmpi	20035e0 <__register_exitproc>

02003394 <exit>:
 2003394:	defffe04 	addi	sp,sp,-8
 2003398:	000b883a 	mov	r5,zero
 200339c:	dc000015 	stw	r16,0(sp)
 20033a0:	dfc00115 	stw	ra,4(sp)
 20033a4:	2021883a 	mov	r16,r4
 20033a8:	20036fc0 	call	20036fc <__call_exitprocs>
 20033ac:	00808034 	movhi	r2,512
 20033b0:	10941004 	addi	r2,r2,20544
 20033b4:	11000017 	ldw	r4,0(r2)
 20033b8:	20800f17 	ldw	r2,60(r4)
 20033bc:	10000126 	beq	r2,zero,20033c4 <exit+0x30>
 20033c0:	103ee83a 	callr	r2
 20033c4:	8009883a 	mov	r4,r16
 20033c8:	20038a00 	call	20038a0 <_exit>

020033cc <memcmp>:
 20033cc:	01c000c4 	movi	r7,3
 20033d0:	3980192e 	bgeu	r7,r6,2003438 <memcmp+0x6c>
 20033d4:	2144b03a 	or	r2,r4,r5
 20033d8:	11c4703a 	and	r2,r2,r7
 20033dc:	10000f26 	beq	r2,zero,200341c <memcmp+0x50>
 20033e0:	21c00003 	ldbu	r7,0(r4)
 20033e4:	28800003 	ldbu	r2,0(r5)
 20033e8:	3880151e 	bne	r7,r2,2003440 <memcmp+0x74>
 20033ec:	30ffff84 	addi	r3,r6,-2
 20033f0:	01bfffc4 	movi	r6,-1
 20033f4:	00000406 	br	2003408 <memcmp+0x3c>
 20033f8:	21c00003 	ldbu	r7,0(r4)
 20033fc:	28800003 	ldbu	r2,0(r5)
 2003400:	18ffffc4 	addi	r3,r3,-1
 2003404:	38800e1e 	bne	r7,r2,2003440 <memcmp+0x74>
 2003408:	21000044 	addi	r4,r4,1
 200340c:	29400044 	addi	r5,r5,1
 2003410:	19bff91e 	bne	r3,r6,20033f8 <__reset+0xfe0023f8>
 2003414:	0005883a 	mov	r2,zero
 2003418:	f800283a 	ret
 200341c:	20c00017 	ldw	r3,0(r4)
 2003420:	28800017 	ldw	r2,0(r5)
 2003424:	1880041e 	bne	r3,r2,2003438 <memcmp+0x6c>
 2003428:	31bfff04 	addi	r6,r6,-4
 200342c:	21000104 	addi	r4,r4,4
 2003430:	29400104 	addi	r5,r5,4
 2003434:	39bff936 	bltu	r7,r6,200341c <__reset+0xfe00241c>
 2003438:	303fe91e 	bne	r6,zero,20033e0 <__reset+0xfe0023e0>
 200343c:	003ff506 	br	2003414 <__reset+0xfe002414>
 2003440:	3885c83a 	sub	r2,r7,r2
 2003444:	f800283a 	ret

02003448 <memcpy>:
 2003448:	00c003c4 	movi	r3,15
 200344c:	2005883a 	mov	r2,r4
 2003450:	1980372e 	bgeu	r3,r6,2003530 <memcpy+0xe8>
 2003454:	2146b03a 	or	r3,r4,r5
 2003458:	18c000cc 	andi	r3,r3,3
 200345c:	1800371e 	bne	r3,zero,200353c <memcpy+0xf4>
 2003460:	327ffc04 	addi	r9,r6,-16
 2003464:	4812d13a 	srli	r9,r9,4
 2003468:	2007883a 	mov	r3,r4
 200346c:	280f883a 	mov	r7,r5
 2003470:	4808913a 	slli	r4,r9,4
 2003474:	1109883a 	add	r4,r2,r4
 2003478:	21000404 	addi	r4,r4,16
 200347c:	3a000017 	ldw	r8,0(r7)
 2003480:	18c00404 	addi	r3,r3,16
 2003484:	39c00404 	addi	r7,r7,16
 2003488:	1a3ffc15 	stw	r8,-16(r3)
 200348c:	3a3ffd17 	ldw	r8,-12(r7)
 2003490:	1a3ffd15 	stw	r8,-12(r3)
 2003494:	3a3ffe17 	ldw	r8,-8(r7)
 2003498:	1a3ffe15 	stw	r8,-8(r3)
 200349c:	3a3fff17 	ldw	r8,-4(r7)
 20034a0:	1a3fff15 	stw	r8,-4(r3)
 20034a4:	193ff51e 	bne	r3,r4,200347c <__reset+0xfe00247c>
 20034a8:	49000044 	addi	r4,r9,1
 20034ac:	2008913a 	slli	r4,r4,4
 20034b0:	328003cc 	andi	r10,r6,15
 20034b4:	1107883a 	add	r3,r2,r4
 20034b8:	290b883a 	add	r5,r5,r4
 20034bc:	010000c4 	movi	r4,3
 20034c0:	2280212e 	bgeu	r4,r10,2003548 <memcpy+0x100>
 20034c4:	52bfff04 	addi	r10,r10,-4
 20034c8:	5014d0ba 	srli	r10,r10,2
 20034cc:	180f883a 	mov	r7,r3
 20034d0:	2811883a 	mov	r8,r5
 20034d4:	5289883a 	add	r4,r10,r10
 20034d8:	2109883a 	add	r4,r4,r4
 20034dc:	21000104 	addi	r4,r4,4
 20034e0:	1909883a 	add	r4,r3,r4
 20034e4:	42400017 	ldw	r9,0(r8)
 20034e8:	39c00104 	addi	r7,r7,4
 20034ec:	42000104 	addi	r8,r8,4
 20034f0:	3a7fff15 	stw	r9,-4(r7)
 20034f4:	393ffb1e 	bne	r7,r4,20034e4 <__reset+0xfe0024e4>
 20034f8:	51000044 	addi	r4,r10,1
 20034fc:	2109883a 	add	r4,r4,r4
 2003500:	2109883a 	add	r4,r4,r4
 2003504:	318000cc 	andi	r6,r6,3
 2003508:	1907883a 	add	r3,r3,r4
 200350c:	290b883a 	add	r5,r5,r4
 2003510:	30000c26 	beq	r6,zero,2003544 <memcpy+0xfc>
 2003514:	298d883a 	add	r6,r5,r6
 2003518:	29c00003 	ldbu	r7,0(r5)
 200351c:	18c00044 	addi	r3,r3,1
 2003520:	29400044 	addi	r5,r5,1
 2003524:	19ffffc5 	stb	r7,-1(r3)
 2003528:	29bffb1e 	bne	r5,r6,2003518 <__reset+0xfe002518>
 200352c:	f800283a 	ret
 2003530:	2007883a 	mov	r3,r4
 2003534:	303ff71e 	bne	r6,zero,2003514 <__reset+0xfe002514>
 2003538:	00000206 	br	2003544 <memcpy+0xfc>
 200353c:	2007883a 	mov	r3,r4
 2003540:	003ff406 	br	2003514 <__reset+0xfe002514>
 2003544:	f800283a 	ret
 2003548:	500d883a 	mov	r6,r10
 200354c:	303ff11e 	bne	r6,zero,2003514 <__reset+0xfe002514>
 2003550:	003ffc06 	br	2003544 <__reset+0xfe002544>

02003554 <strlen>:
 2003554:	208000cc 	andi	r2,r4,3
 2003558:	10001d26 	beq	r2,zero,20035d0 <strlen+0x7c>
 200355c:	20800007 	ldb	r2,0(r4)
 2003560:	10001d26 	beq	r2,zero,20035d8 <strlen+0x84>
 2003564:	2005883a 	mov	r2,r4
 2003568:	00000206 	br	2003574 <strlen+0x20>
 200356c:	10c00007 	ldb	r3,0(r2)
 2003570:	18001526 	beq	r3,zero,20035c8 <strlen+0x74>
 2003574:	10800044 	addi	r2,r2,1
 2003578:	10c000cc 	andi	r3,r2,3
 200357c:	183ffb1e 	bne	r3,zero,200356c <__reset+0xfe00256c>
 2003580:	10c00017 	ldw	r3,0(r2)
 2003584:	01ffbff4 	movhi	r7,65279
 2003588:	39ffbfc4 	addi	r7,r7,-257
 200358c:	01a02074 	movhi	r6,32897
 2003590:	31a02004 	addi	r6,r6,-32640
 2003594:	00000206 	br	20035a0 <strlen+0x4c>
 2003598:	10800104 	addi	r2,r2,4
 200359c:	10c00017 	ldw	r3,0(r2)
 20035a0:	19cb883a 	add	r5,r3,r7
 20035a4:	00c6303a 	nor	r3,zero,r3
 20035a8:	28c6703a 	and	r3,r5,r3
 20035ac:	1986703a 	and	r3,r3,r6
 20035b0:	183ff926 	beq	r3,zero,2003598 <__reset+0xfe002598>
 20035b4:	10c00007 	ldb	r3,0(r2)
 20035b8:	18000326 	beq	r3,zero,20035c8 <strlen+0x74>
 20035bc:	10800044 	addi	r2,r2,1
 20035c0:	10c00007 	ldb	r3,0(r2)
 20035c4:	183ffd1e 	bne	r3,zero,20035bc <__reset+0xfe0025bc>
 20035c8:	1105c83a 	sub	r2,r2,r4
 20035cc:	f800283a 	ret
 20035d0:	2005883a 	mov	r2,r4
 20035d4:	003fea06 	br	2003580 <__reset+0xfe002580>
 20035d8:	0005883a 	mov	r2,zero
 20035dc:	f800283a 	ret

020035e0 <__register_exitproc>:
 20035e0:	defffa04 	addi	sp,sp,-24
 20035e4:	00808034 	movhi	r2,512
 20035e8:	10941004 	addi	r2,r2,20544
 20035ec:	dc000315 	stw	r16,12(sp)
 20035f0:	14000017 	ldw	r16,0(r2)
 20035f4:	dc400415 	stw	r17,16(sp)
 20035f8:	dfc00515 	stw	ra,20(sp)
 20035fc:	80805217 	ldw	r2,328(r16)
 2003600:	2023883a 	mov	r17,r4
 2003604:	10003a26 	beq	r2,zero,20036f0 <__register_exitproc+0x110>
 2003608:	10c00117 	ldw	r3,4(r2)
 200360c:	020007c4 	movi	r8,31
 2003610:	40c0190e 	bge	r8,r3,2003678 <__register_exitproc+0x98>
 2003614:	00800034 	movhi	r2,0
 2003618:	10800004 	addi	r2,r2,0
 200361c:	1000061e 	bne	r2,zero,2003638 <__register_exitproc+0x58>
 2003620:	00bfffc4 	movi	r2,-1
 2003624:	dfc00517 	ldw	ra,20(sp)
 2003628:	dc400417 	ldw	r17,16(sp)
 200362c:	dc000317 	ldw	r16,12(sp)
 2003630:	dec00604 	addi	sp,sp,24
 2003634:	f800283a 	ret
 2003638:	01006404 	movi	r4,400
 200363c:	d9400015 	stw	r5,0(sp)
 2003640:	d9800115 	stw	r6,4(sp)
 2003644:	d9c00215 	stw	r7,8(sp)
 2003648:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200364c:	d9400017 	ldw	r5,0(sp)
 2003650:	d9800117 	ldw	r6,4(sp)
 2003654:	d9c00217 	ldw	r7,8(sp)
 2003658:	103ff126 	beq	r2,zero,2003620 <__reset+0xfe002620>
 200365c:	81005217 	ldw	r4,328(r16)
 2003660:	10000115 	stw	zero,4(r2)
 2003664:	0007883a 	mov	r3,zero
 2003668:	11000015 	stw	r4,0(r2)
 200366c:	80805215 	stw	r2,328(r16)
 2003670:	10006215 	stw	zero,392(r2)
 2003674:	10006315 	stw	zero,396(r2)
 2003678:	88000d1e 	bne	r17,zero,20036b0 <__register_exitproc+0xd0>
 200367c:	19000084 	addi	r4,r3,2
 2003680:	2109883a 	add	r4,r4,r4
 2003684:	18c00044 	addi	r3,r3,1
 2003688:	2109883a 	add	r4,r4,r4
 200368c:	10c00115 	stw	r3,4(r2)
 2003690:	1105883a 	add	r2,r2,r4
 2003694:	11400015 	stw	r5,0(r2)
 2003698:	0005883a 	mov	r2,zero
 200369c:	dfc00517 	ldw	ra,20(sp)
 20036a0:	dc400417 	ldw	r17,16(sp)
 20036a4:	dc000317 	ldw	r16,12(sp)
 20036a8:	dec00604 	addi	sp,sp,24
 20036ac:	f800283a 	ret
 20036b0:	18c9883a 	add	r4,r3,r3
 20036b4:	2109883a 	add	r4,r4,r4
 20036b8:	1109883a 	add	r4,r2,r4
 20036bc:	21802215 	stw	r6,136(r4)
 20036c0:	01800044 	movi	r6,1
 20036c4:	12006217 	ldw	r8,392(r2)
 20036c8:	30cc983a 	sll	r6,r6,r3
 20036cc:	4190b03a 	or	r8,r8,r6
 20036d0:	12006215 	stw	r8,392(r2)
 20036d4:	21c04215 	stw	r7,264(r4)
 20036d8:	01000084 	movi	r4,2
 20036dc:	893fe71e 	bne	r17,r4,200367c <__reset+0xfe00267c>
 20036e0:	11006317 	ldw	r4,396(r2)
 20036e4:	218cb03a 	or	r6,r4,r6
 20036e8:	11806315 	stw	r6,396(r2)
 20036ec:	003fe306 	br	200367c <__reset+0xfe00267c>
 20036f0:	80805304 	addi	r2,r16,332
 20036f4:	80805215 	stw	r2,328(r16)
 20036f8:	003fc306 	br	2003608 <__reset+0xfe002608>

020036fc <__call_exitprocs>:
 20036fc:	00808034 	movhi	r2,512
 2003700:	10941004 	addi	r2,r2,20544
 2003704:	10800017 	ldw	r2,0(r2)
 2003708:	defff304 	addi	sp,sp,-52
 200370c:	df000b15 	stw	fp,44(sp)
 2003710:	d8800015 	stw	r2,0(sp)
 2003714:	10805204 	addi	r2,r2,328
 2003718:	dd400815 	stw	r21,32(sp)
 200371c:	dfc00c15 	stw	ra,48(sp)
 2003720:	ddc00a15 	stw	r23,40(sp)
 2003724:	dd800915 	stw	r22,36(sp)
 2003728:	dd000715 	stw	r20,28(sp)
 200372c:	dcc00615 	stw	r19,24(sp)
 2003730:	dc800515 	stw	r18,20(sp)
 2003734:	dc400415 	stw	r17,16(sp)
 2003738:	dc000315 	stw	r16,12(sp)
 200373c:	d9000115 	stw	r4,4(sp)
 2003740:	2839883a 	mov	fp,r5
 2003744:	d8800215 	stw	r2,8(sp)
 2003748:	057fffc4 	movi	r21,-1
 200374c:	d8800017 	ldw	r2,0(sp)
 2003750:	14805217 	ldw	r18,328(r2)
 2003754:	90001826 	beq	r18,zero,20037b8 <__call_exitprocs+0xbc>
 2003758:	ddc00217 	ldw	r23,8(sp)
 200375c:	90c00117 	ldw	r3,4(r18)
 2003760:	1c3fffc4 	addi	r16,r3,-1
 2003764:	80001116 	blt	r16,zero,20037ac <__call_exitprocs+0xb0>
 2003768:	18c00044 	addi	r3,r3,1
 200376c:	8427883a 	add	r19,r16,r16
 2003770:	18c7883a 	add	r3,r3,r3
 2003774:	95802204 	addi	r22,r18,136
 2003778:	9ce7883a 	add	r19,r19,r19
 200377c:	18c7883a 	add	r3,r3,r3
 2003780:	b4e7883a 	add	r19,r22,r19
 2003784:	90e3883a 	add	r17,r18,r3
 2003788:	e0001726 	beq	fp,zero,20037e8 <__call_exitprocs+0xec>
 200378c:	8c87c83a 	sub	r3,r17,r18
 2003790:	b0c7883a 	add	r3,r22,r3
 2003794:	18c01e17 	ldw	r3,120(r3)
 2003798:	1f001326 	beq	r3,fp,20037e8 <__call_exitprocs+0xec>
 200379c:	843fffc4 	addi	r16,r16,-1
 20037a0:	9cffff04 	addi	r19,r19,-4
 20037a4:	8c7fff04 	addi	r17,r17,-4
 20037a8:	857ff71e 	bne	r16,r21,2003788 <__reset+0xfe002788>
 20037ac:	00800034 	movhi	r2,0
 20037b0:	10800004 	addi	r2,r2,0
 20037b4:	10002a1e 	bne	r2,zero,2003860 <__call_exitprocs+0x164>
 20037b8:	dfc00c17 	ldw	ra,48(sp)
 20037bc:	df000b17 	ldw	fp,44(sp)
 20037c0:	ddc00a17 	ldw	r23,40(sp)
 20037c4:	dd800917 	ldw	r22,36(sp)
 20037c8:	dd400817 	ldw	r21,32(sp)
 20037cc:	dd000717 	ldw	r20,28(sp)
 20037d0:	dcc00617 	ldw	r19,24(sp)
 20037d4:	dc800517 	ldw	r18,20(sp)
 20037d8:	dc400417 	ldw	r17,16(sp)
 20037dc:	dc000317 	ldw	r16,12(sp)
 20037e0:	dec00d04 	addi	sp,sp,52
 20037e4:	f800283a 	ret
 20037e8:	91000117 	ldw	r4,4(r18)
 20037ec:	88c00017 	ldw	r3,0(r17)
 20037f0:	213fffc4 	addi	r4,r4,-1
 20037f4:	24001526 	beq	r4,r16,200384c <__call_exitprocs+0x150>
 20037f8:	88000015 	stw	zero,0(r17)
 20037fc:	183fe726 	beq	r3,zero,200379c <__reset+0xfe00279c>
 2003800:	00800044 	movi	r2,1
 2003804:	1408983a 	sll	r4,r2,r16
 2003808:	91406217 	ldw	r5,392(r18)
 200380c:	95000117 	ldw	r20,4(r18)
 2003810:	214a703a 	and	r5,r4,r5
 2003814:	28000b26 	beq	r5,zero,2003844 <__call_exitprocs+0x148>
 2003818:	91406317 	ldw	r5,396(r18)
 200381c:	2148703a 	and	r4,r4,r5
 2003820:	20000c1e 	bne	r4,zero,2003854 <__call_exitprocs+0x158>
 2003824:	99400017 	ldw	r5,0(r19)
 2003828:	d9000117 	ldw	r4,4(sp)
 200382c:	183ee83a 	callr	r3
 2003830:	90c00117 	ldw	r3,4(r18)
 2003834:	1d3fc51e 	bne	r3,r20,200374c <__reset+0xfe00274c>
 2003838:	b8c00017 	ldw	r3,0(r23)
 200383c:	1cbfd726 	beq	r3,r18,200379c <__reset+0xfe00279c>
 2003840:	003fc206 	br	200374c <__reset+0xfe00274c>
 2003844:	183ee83a 	callr	r3
 2003848:	003ff906 	br	2003830 <__reset+0xfe002830>
 200384c:	94000115 	stw	r16,4(r18)
 2003850:	003fea06 	br	20037fc <__reset+0xfe0027fc>
 2003854:	99000017 	ldw	r4,0(r19)
 2003858:	183ee83a 	callr	r3
 200385c:	003ff406 	br	2003830 <__reset+0xfe002830>
 2003860:	90c00117 	ldw	r3,4(r18)
 2003864:	1800081e 	bne	r3,zero,2003888 <__call_exitprocs+0x18c>
 2003868:	90c00017 	ldw	r3,0(r18)
 200386c:	18000a26 	beq	r3,zero,2003898 <__call_exitprocs+0x19c>
 2003870:	9009883a 	mov	r4,r18
 2003874:	b8c00015 	stw	r3,0(r23)
 2003878:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 200387c:	bc800017 	ldw	r18,0(r23)
 2003880:	903fb61e 	bne	r18,zero,200375c <__reset+0xfe00275c>
 2003884:	003fcc06 	br	20037b8 <__reset+0xfe0027b8>
 2003888:	90c00017 	ldw	r3,0(r18)
 200388c:	902f883a 	mov	r23,r18
 2003890:	1825883a 	mov	r18,r3
 2003894:	003ffa06 	br	2003880 <__reset+0xfe002880>
 2003898:	0007883a 	mov	r3,zero
 200389c:	003ffb06 	br	200388c <__reset+0xfe00288c>

020038a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20038a0:	defffd04 	addi	sp,sp,-12
 20038a4:	df000215 	stw	fp,8(sp)
 20038a8:	df000204 	addi	fp,sp,8
 20038ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20038b0:	0001883a 	nop
 20038b4:	e0bfff17 	ldw	r2,-4(fp)
 20038b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20038bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20038c0:	10000226 	beq	r2,zero,20038cc <_exit+0x2c>
    ALT_SIM_FAIL();
 20038c4:	002af070 	cmpltui	zero,zero,43969
 20038c8:	00000106 	br	20038d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 20038cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20038d0:	003fff06 	br	20038d0 <__reset+0xfe0028d0>
